<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android ContentProvider</title>
    <url>/blogs/2018/05/13/android-contentprovider/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li><p><code>ContentProvider</code> 是 Android 的四大组件之一，日常开发的频率明显没有其他三大组件的高。</p>
</li>
<li><p><code>ContentProvider</code> 可以用来在相同或不同进程（或应用）中共享数据，数据来源可以是数据库、文件、XML、网络等。</p>
</li>
<li><p><code>ContentProvider</code> 是内容的提供者，而 <code>ContentResolver</code> 是内容的获取者</p>
</li>
</ul>
<h2 id="统一资源标识符（URI）"><a href="#统一资源标识符（URI）" class="headerlink" title="统一资源标识符（URI）"></a>统一资源标识符（URI）</h2><blockquote>
<p>在电脑术语中，统一资源标识符（Uniform Resource Identifier，URI）是一个用于标识某一互联网资源名称的字符串。该种标识允许用户对任何（包括本地和互联网）的资源通过特定的协议进行交互操作。<code>URI</code> 由包括确定语法和相关协议的方案所定义。（摘自 <a href="https://baike.baidu.com/item/URI/2901761?fr=aladdin">URI（标识、定位任何资源的字符串）_百度百科</a>）</p>
</blockquote>
<p><code>URI</code> 在这里的作用就是唯一标识 <code>ContentPrivider</code> 或 其中的数据</p>
<p><strong>格式</strong>：<code>content://Authority/Path/ID</code></p>
<p><strong>示例</strong>：<code>content://cn.sample.privider.SampleProvider/User/1</code></p>
<ol>
<li><code>content://</code>：该部分是 <code>Schema</code>，是 Android 规定的 ContentProvider 的 URI 协议</li>
<li><code>cn.sample.privider.SampleProvider</code>：该部分是 <code>Authority</code>，是当前 ContentProvider 的唯一标识，为使得该标识唯一，应该用 <code>[包名].[类名]</code> 的形式定义</li>
<li><code>User</code>：该部分是 <code>Path</code>，是 <code>ContentProvider</code> 指向的数据库的表名（通常是这样，但 <code>Path</code> 也可以不表示表名。前面说到 <code>ContentProvider</code> 提供的数据来源可以是数据库、文件、XML、网络等，所以 <code>Path</code> 也可以表示文件名或其他，这取决于你的 <code>ContentProvider</code> 的逻辑）</li>
<li><code>1</code>：该部分是 <code>ID</code>，它表示数据库表中的某个记录，如果没有指定，则返回全部记录</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/ea8bc4aaf057">Android：关于ContentProvider的知识都在这里了！ - 简书</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ContentProvider</tag>
      </tags>
  </entry>
  <entry>
    <title>Android FileProvider</title>
    <url>/blogs/2018/03/02/android-fileprovider/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>从 Android 7.0（API 24）开始，应用提供文件给其它应用使用时，如果直接给出一个 <code>file://</code> （通过 <code>Uri.fromFile(File)</code>）格式的 URI 的话，应用会抛出 <code>FileUriExposedException</code> 异常。解决这个问题的最简单方法就是使用 <code>android.support.v4.content.FileProvider</code>。</p>
<span id="more"></span>

<h2 id="在-AndroidManifest-xml-中的配置"><a href="#在-AndroidManifest-xml-中的配置" class="headerlink" title="在 AndroidManifest.xml 中的配置"></a>在 AndroidManifest.xml 中的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.mydomain&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;android.support.v4.content.FileProvider&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:authorities</span>=<span class="string">&quot;com.mydomain.fileprovider&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:resource</span>=<span class="string">&quot;@xml/file_paths&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="声明合法的文件目录"><a href="#声明合法的文件目录" class="headerlink" title="声明合法的文件目录"></a>声明合法的文件目录</h2><p>res/xml/file_paths.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">files-path</span> <span class="attr">name</span>=<span class="string">&quot;my_images&quot;</span> <span class="attr">path</span>=<span class="string">&quot;images/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点（.）表示任意路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">&quot;my_external&quot;</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;paths&gt;</code> 根元素可以包含以下一个或更多的子元素</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">files-path</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">path</span>=<span class="string">&quot;path&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应于 <code>Context.getFilesDir()</code> 下的目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache-path</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">path</span>=<span class="string">&quot;path&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应于 <code>Context.getCacheDir()</code> 下的目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">path</span>=<span class="string">&quot;path&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应于 <code>Environment.getExternalStorageDirectory()</code> 下的目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">external-files-path</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">path</span>=<span class="string">&quot;path&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应于 <code>Context.getExternalFilesDir(String)</code>、 <code>Context.getExternalFilesDir(null)</code> 下的目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">external-cache-path</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">path</span>=<span class="string">&quot;path&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应于 <code>Context.getExternalCacheDir()</code> 下的目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">external-media-path</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">path</span>=<span class="string">&quot;path&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应于 <code>Context.getExternalMediaDirs()</code> 下的目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root-path</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">path</span>=<span class="string">&quot;path&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应于 Android 系统的根目录 <code>/</code> 。这个元素在文档中并未提及，但是声明在文件中也是有效的</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> uri = FileProvider.getUriForFile(context, <span class="string">&quot;com.mydomain.fileprovider&quot;</span>, file)</span><br><span class="line"><span class="keyword">val</span> intent = Intent(Intent.ACTION_SEND)</span><br><span class="line"><span class="comment">// 授予此 Intent 的接收者对 Intent 数据中的 URI 和其 ClipData 中指定的任何 URI 的读取和写入的权限</span></span><br><span class="line">intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION)</span><br><span class="line">intent.setDataAndType(uri, <span class="string">&quot;*/*&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(context.packageManager) != <span class="literal">null</span>) &#123;</span><br><span class="line">    startActivity(intent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实际开发中的问题"><a href="#实际开发中的问题" class="headerlink" title="实际开发中的问题"></a>实际开发中的问题</h2><p>使用 <code>FileProvider</code> 固然是推荐使用的、正确的方法。但是在实际的开发中，某些应用无法理解指向文件的 <code>content://</code> 格式的 URI 。</p>
<p>自定义自己的 <code>Application</code> 类重写 <code>onCreate</code> 方法，在方法中加入如下代码，可以使得应用直接使用 <code>file://</code> 格式的 URI 发送出去也不会抛出 <code>FileUriExposedException</code> 异常。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">    StrictMode.setVmPolicy(StrictMode.VmPolicy.Builder().build())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.android.google.cn/reference/android/support/v4/content/FileProvider.html">FileProvider | Android Developers</a></p>
<p><a href="https://developer.android.google.cn/reference/android/os/StrictMode.html">StrictMode | Android Developers</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>FileProvider</tag>
      </tags>
  </entry>
  <entry>
    <title>Android JobService</title>
    <url>/blogs/2018/03/04/android-jobservice/</url>
    <content><![CDATA[<h2 id="在-AndroidManifest-xml-中的配置"><a href="#在-AndroidManifest-xml-中的配置" class="headerlink" title="在 AndroidManifest.xml 中的配置"></a>在 AndroidManifest.xml 中的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;.MyJobService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:permission</span>=<span class="string">&quot;android.permission.BIND_JOB_SERVICE&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="继承-JobService"><a href="#继承-JobService" class="headerlink" title="继承 JobService"></a>继承 JobService</h2><p>继承 <code>JobService</code> 创建自己的 <code>Service</code> 类，实现 <code>onStartJob(JobParameters)</code> 和 <code>onStopJob(JobParameters)</code> 方法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TargetApi(Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJobService</span> : <span class="type">JobService</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStopJob</span><span class="params">(params: <span class="type">JobParameters</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStartJob</span><span class="params">(params: <span class="type">JobParameters</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> jobInfo = JobInfo.Builder(<span class="number">0</span>, ComponentName(context, MyJobService::<span class="keyword">class</span>.java))</span><br><span class="line">    .setRequiresDeviceIdle(<span class="literal">true</span>)</span><br><span class="line">    .build()</span><br><span class="line">(context.getSystemService(Context.JOB_SCHEDULER_SERVICE) <span class="keyword">as</span> JobScheduler).schedule(jobInfo)</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.android.google.cn/reference/android/app/job/JobService.html">JobService | Android Developers</a></p>
<p><a href="https://developer.android.google.cn/reference/android/app/job/JobInfo.Builder.html">JobInfo.Builder | Android Developers</a></p>
<p><a href="https://developer.android.google.cn/reference/android/app/job/JobScheduler.html">JobScheduler | Android Developers</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>JobService</tag>
        <tag>JobScheduler</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 摄像头</title>
    <url>/blogs/2018/05/11/android-%E6%91%84%E5%83%8F%E5%A4%B4/</url>
    <content><![CDATA[<h2 id="简单调用"><a href="#简单调用" class="headerlink" title="简单调用"></a>简单调用</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启动安装在手机上的摄像头应用</span></span><br><span class="line">startActivityForResult(Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE), <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (requestCode) &#123;</span><br><span class="line">        <span class="number">0</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (Activity.RESULT_OK == resultCode &amp;&amp; <span class="keyword">data</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取摄像头应用返回的 Bitmap</span></span><br><span class="line">                <span class="keyword">val</span> bitmap = <span class="keyword">data</span>.getParcelableExtra&lt;Bitmap&gt;(<span class="string">&quot;data&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="获取原图"><a href="#获取原图" class="headerlink" title="获取原图"></a>获取原图</h2><p>使用以上方法获取得到的 <code>Bitmap</code> 是缩略图，需要获取原图则使用以下方法</p>
<p>在 <code>manifest.xml</code> 文件中添加 <code>READ_EXTERNAL_STORAGE</code> 权限</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM)</span><br><span class="line"><span class="keyword">val</span> imageFile = File(dir, <span class="string">&quot;img.jpg&quot;</span>)</span><br><span class="line"><span class="comment">// Intent 启动安装在手机上的摄像头应用</span></span><br><span class="line"><span class="keyword">val</span> intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)</span><br><span class="line"><span class="comment">// 指定照片或视频的保存文件名</span></span><br><span class="line">intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(imageFile))</span><br><span class="line">startActivityForResult(intent, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (requestCode) &#123;</span><br><span class="line">        <span class="number">0</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (Activity.RESULT_OK == resultCode) &#123;</span><br><span class="line">                <span class="comment">// 从文件系统中读取照片文件</span></span><br><span class="line">                <span class="keyword">val</span> bitmap = BitmapFactory.decodeFile(imageFile.absolutePath)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用以下方法根据 <code>ImageView</code> 的宽高对图片进行缩放</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">setPicture</span><span class="params">(imageView: <span class="type">ImageView</span>, photo: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取 ImageView 的宽高</span></span><br><span class="line">    <span class="keyword">val</span> targetW = imageView.width</span><br><span class="line">    <span class="keyword">val</span> targetH = imageView.height</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 Bitmap 的大小</span></span><br><span class="line">    <span class="keyword">val</span> bmOptions = BitmapFactory.Options()</span><br><span class="line">    bmOptions.inJustDecodeBounds = <span class="literal">true</span></span><br><span class="line">    BitmapFactory.decodeFile(photo.absolutePath, bmOptions)</span><br><span class="line">    <span class="keyword">val</span> photoW = bmOptions.outWidth</span><br><span class="line">    <span class="keyword">val</span> photoH = bmOptions.outHeight</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定缩小图片的程度</span></span><br><span class="line">    <span class="keyword">val</span> scaleFactor = Math.min(photoW / targetW, photoH / targetH)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将图片解码为适合 ImageView 宽高的 Bitmap</span></span><br><span class="line">    bmOptions.inJustDecodeBounds = <span class="literal">false</span></span><br><span class="line">    bmOptions.inSampleSize = scaleFactor</span><br><span class="line">    bmOptions.inPurgeable = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> bitmap = BitmapFactory.decodeFile(photo.absolutePath, bmOptions)</span><br><span class="line">    imageView.setImageBitmap(bitmap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FileUriExposedException-异常"><a href="#FileUriExposedException-异常" class="headerlink" title="FileUriExposedException 异常"></a>FileUriExposedException 异常</h2><p>[Android FileProvider](../Android FileProvider)</p>
<h2 id="拍摄视频"><a href="#拍摄视频" class="headerlink" title="拍摄视频"></a>拍摄视频</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> takeVideoIntent = Intent(MediaStore.ACTION_VIDEO_CAPTURE)</span><br><span class="line"><span class="keyword">if</span> (takeVideoIntent.resolveActivity(packageManager) != <span class="literal">null</span>) &#123;</span><br><span class="line">    startActivityForResult(takeVideoIntent, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (requestCode) &#123;</span><br><span class="line">        <span class="number">1</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">data</span> != <span class="literal">null</span> &amp;&amp; resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">                <span class="keyword">val</span> videoUri = <span class="keyword">data</span>.<span class="keyword">data</span></span><br><span class="line">                videoView.setVideoURI(videoUri)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.android.google.cn/training/camera/photobasics">Take photos &nbsp;|&nbsp; Android Developers</a></p>
<p><a href="https://www.yiibai.com/android/android_camera.html">Android Camera(摄像头) - Android教程&trade;</a></p>
<p><a href="https://blog.csdn.net/qq_30380777/article/details/52850332?locationNum=9&fps=1">Android 调用系统拍照后返回的图片变小了（变模糊了） - CSDN博客</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>摄像头</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 无障碍功能</title>
    <url>/blogs/2018/02/08/android-%E6%97%A0%E9%9A%9C%E7%A2%8D%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h2 id="继承-AccessibilityService-类"><a href="#继承-AccessibilityService-类" class="headerlink" title="继承 AccessibilityService 类"></a>继承 AccessibilityService 类</h2><p>编写自己的 <code>Service</code> 类，继承 <code>android.accessibilityservice.AccessibilityService</code> ，并实现 <code>onAccessibilityEvent(AccessibilityEvent event)</code> 和 <code>onInterruput()</code> 父类的两个抽象方法:</p>
<p>MyAccessibilityService.kt</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.accessibilityservice.AccessibilityService</span><br><span class="line"><span class="keyword">import</span> android.view.accessibility.AccessibilityEvent</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAccessibilityService</span> : <span class="type">AccessibilityService</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInterrupt</span><span class="params">()</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAccessibilityEvent</span><span class="params">(event: <span class="type">AccessibilityEvent</span>?)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="在-AndroidManifest-xml-中的配置"><a href="#在-AndroidManifest-xml-中的配置" class="headerlink" title="在 AndroidManifest.xml 中的配置"></a>在 AndroidManifest.xml 中的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;.MyAccessibilityService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:permission</span>=<span class="string">&quot;android.permission.BIND_ACCESSIBILITY_SERVICE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.accessibilityservice.AccessibilityService&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;android.accessibilityservice&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resource</span>=<span class="string">&quot;@xml/accessibility_config&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="编写无障碍服务配置"><a href="#编写无障碍服务配置" class="headerlink" title="编写无障碍服务配置"></a>编写无障碍服务配置</h2><p>accessibility_config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">accessibility-service</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:accessibilityEventTypes</span>=<span class="string">&quot;typeAllMask&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:accessibilityFeedbackType</span>=<span class="string">&quot;feedbackAllMask&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:accessibilityFlags</span>=<span class="string">&quot;flagDefault&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:canRetrieveWindowContent</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:description</span>=<span class="string">&quot;@string/accessibility_description&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:notificationTimeout</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:packageNames</span>=<span class="string">&quot;com.tencent.mm&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>android:description</td>
<td>相关数据的描述性文本</td>
</tr>
<tr>
<td>android:summary</td>
<td>该项目的摘要</td>
</tr>
<tr>
<td>android:settingsActivity</td>
<td>允许用户修改服务设置的活动的组件名称</td>
</tr>
<tr>
<td>android:accessibilityEventTypes</td>
<td>指定服务能够接收处理的事件类型</td>
</tr>
<tr>
<td>android:packageNames</td>
<td>服务处理的目标应用包名称（多个包用逗号分隔；如果没有该属性将包含所有的包）</td>
</tr>
<tr>
<td>android:accessibilityFeedbackType</td>
<td>服务提供的反馈类型</td>
</tr>
<tr>
<td>android:notificationTimeout</td>
<td>发送到无障碍服务的两个相同类型的可访问事件之间的最小时间间隔（以毫秒为单位）</td>
</tr>
<tr>
<td>android:accessibilityFlags</td>
<td>其他标志</td>
</tr>
<tr>
<td>android:canRetrieveWindowContent</td>
<td>是否允许无障碍服务能够检索活动窗口内容</td>
</tr>
<tr>
<td>android:canRequestTouchExplorationMode</td>
<td>是否允许无障碍服务能够请求触摸探察模式，在这种模式下，可以大声朗读所触摸的项目，并且可以通过手势探察 UI</td>
</tr>
<tr>
<td>android:canRequestEnhancedWebAccessibility</td>
<td>是否允许服务能够请求增强的 Web 可访问性增强的属性</td>
</tr>
<tr>
<td>android:canRequestFilterKeyEvents</td>
<td>是否允许无障碍服务能够请求过滤关键事件的属性</td>
</tr>
<tr>
<td>android:canControlMagnification</td>
<td>是否允许无障碍服务能够控制显示的放大倍数</td>
</tr>
<tr>
<td>android:canPerformGestures</td>
<td>是否允许无障碍服务能够执行手势</td>
</tr>
<tr>
<td>android:canRequestFingerprintGestures</td>
<td>是否允许无障碍服务能够从指纹传感器捕捉手势</td>
</tr>
</tbody></table>
<p>也可以在服务运行期间随时调用 <code>setServiceInfo(AccessibilityServiceInfo)</code> 方法来动态更改服务配置。</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>无障碍服务的生命周期仅由系统管理，并遵循既定的服务生命周期。 启动无障碍服务是由用户明确地在设备设置中启动服务来触发的。 系统绑定到服务后，它调用 <code>onServiceConnected()</code> 方法。可以覆盖此方法执行服务绑定后的初始化操作。</p>
<p>当用户在设备设置中关闭辅助功能或者调用 <code>disableSelf()</code> （API 24）停止辅助功能。</p>
<h2 id="判断服务是否启用"><a href="#判断服务是否启用" class="headerlink" title="判断服务是否启用"></a>判断服务是否启用</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用示例：</span></span><br><span class="line"><span class="comment"> * accessibilityServiceEnabled(context, MyAccessibilityService::class.java.name, AccessibilityServiceInfo.FEEDBACK_AUDIBLE)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">accessibilityServiceEnabled</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">Context</span>, serviceName: <span class="type">String</span>, feedbackTypeFlags: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> am = context.getSystemService(Context.ACCESSIBILITY_SERVICE) <span class="keyword">as</span> AccessibilityManager</span><br><span class="line">    <span class="keyword">val</span> list = am.getEnabledAccessibilityServiceList(feedbackTypeFlags)</span><br><span class="line">    list.forEach &#123;</span><br><span class="line">        <span class="keyword">val</span> serviceInfo = it.resolveInfo.serviceInfo</span><br><span class="line">        <span class="keyword">if</span> (context.packageName == serviceInfo.packageName &amp;&amp; serviceName == serviceInfo.name)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a>打开设置</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS)</span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(packageManager) != <span class="literal">null</span>) &#123;</span><br><span class="line">    startActivity(intent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="检索窗口内容"><a href="#检索窗口内容" class="headerlink" title="检索窗口内容"></a>检索窗口内容</h3><p>服务可以在其声明中指定它可以检索窗口内容，该窗口内容表示为 <code>AccessibilityWindowInfo</code> 和 <code>AccessibilityNodeInfo</code> 对象的树。声明此功能要求服务通过 <code>AndroidManifest.xml</code> 的 <code>meta-data</code> 引用的 xml 资源进行声明配置（即声明 <code>android:canRetrieveWindowContent=&quot;true&quot;</code>）。</p>
<p>可以使用 <code>AccessibilityEvent.getSource()</code>、<code>findFocus(int)</code>、<code>getWindows()</code>、<code>getRootInActiveWindow()</code> 等方法对窗口内容进行检索。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.android.google.cn/reference/android/accessibilityservice/AccessibilityService.html">AccessibilityService | Android Developers</a></p>
<p><a href="https://developer.android.google.cn/reference/android/accessibilityservice/AccessibilityServiceInfo.html">AccessibilityServiceInfo | Android Developers</a></p>
<p><a href="https://developer.android.google.cn/reference/android/view/accessibility/AccessibilityEvent.html">AccessibilityEvent | Android Developers</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>无障碍</tag>
        <tag>AccessibilityService</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 通知栏使用权</title>
    <url>/blogs/2018/02/11/android-%E9%80%9A%E7%9F%A5%E6%A0%8F%E4%BD%BF%E7%94%A8%E6%9D%83/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Android API 18 开始，应用可以通过 NotificationListenerService 接收通知的发布、删除、或通知排序变更的回调消息。</p>
<h2 id="继承-NotificationListenerService-类"><a href="#继承-NotificationListenerService-类" class="headerlink" title="继承 NotificationListenerService 类"></a>继承 NotificationListenerService 类</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.<span class="keyword">annotation</span>.TargetApi</span><br><span class="line"><span class="keyword">import</span> android.os.Build</span><br><span class="line"><span class="keyword">import</span> android.service.notification.NotificationListenerService</span><br><span class="line"><span class="keyword">import</span> android.service.notification.StatusBarNotification</span><br><span class="line"></span><br><span class="line"><span class="comment">// NotificationListenerService 是 API 18 开始出现的</span></span><br><span class="line"><span class="meta">@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNotificationListenerService</span> : <span class="type">NotificationListenerService</span></span>() &#123;</span><br><span class="line">    <span class="comment">// API 21 之前，父类的这个方法是 abstract 的</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNotificationPosted</span><span class="params">(sbn: <span class="type">StatusBarNotification</span>?)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// API 21 之前，父类的这个方法是 abstract 的</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNotificationRemoved</span><span class="params">(sbn: <span class="type">StatusBarNotification</span>?)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="在-AndroidManifest-xml-中的配置"><a href="#在-AndroidManifest-xml-中的配置" class="headerlink" title="在 AndroidManifest.xml 中的配置"></a>在 AndroidManifest.xml 中的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;.MyNotificationListenerService&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:permission</span>=<span class="string">&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.service.notification.NotificationListenerService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在执行任何操作之前，服务应先等待 <code>onListenerConnected()</code> 方法的回调。 <code>requestRebind(ComponentName)</code> （API 24）方法是唯一可以在 <code>onListenerConnected()</code> 之前或 <code>onListenerDisconnected()</code> 之后调用的方法。</p>
<h2 id="常用-API"><a href="#常用-API" class="headerlink" title="常用 API"></a>常用 API</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>cancelAllNotifications ()</td>
<td>清除所有通知</td>
</tr>
<tr>
<td>cancelNotification(String pkg, String tag, int id)</td>
<td>清除指定的一条通知（API 21 开始弃用）</td>
</tr>
<tr>
<td>cancelNotification(String key)</td>
<td>清除指定的一条通知（API 21）</td>
</tr>
<tr>
<td>getActiveNotifications()</td>
<td>获取所有通知</td>
</tr>
<tr>
<td>onNotificationPosted(StatusBarNotification sbn)</td>
<td>实现这个方法接收通知发布的回调消息</td>
</tr>
<tr>
<td>onNotificationRemoved(StatusBarNotification sbn)</td>
<td>实现这个方法接收通知删除的回调消息</td>
</tr>
<tr>
<td>onNotificationRankingUpdate(NotificationListenerService.RankingMap rankingMap)</td>
<td>实现这个方法接收通知顺序更变的回调消息</td>
</tr>
</tbody></table>
<h2 id="StatusBarNotification-常用-API"><a href="#StatusBarNotification-常用-API" class="headerlink" title="StatusBarNotification 常用 API"></a>StatusBarNotification 常用 API</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>getKey()</td>
<td>此通知记录的唯一标识</td>
</tr>
<tr>
<td>getPackageName()</td>
<td>发布通知的应用包名</td>
</tr>
<tr>
<td>getId()</td>
<td><code>NotificationManager.notify(int id, Notification notification)</code> 的 id</td>
</tr>
<tr>
<td>getNotification()</td>
<td><code>NotificationManager.notify(int id, Notification notification)</code> 的 notification</td>
</tr>
<tr>
<td>getPostTime()</td>
<td>通知的发布时间（<code>System.currentTimeMillis()</code>），可能跟 <code>Notification.when</code> 不相同</td>
</tr>
<tr>
<td>getTag()</td>
<td><code>NotificationManager.notify(String tag, int id, Notification notification)</code> 的 tag，如果没有指定 tag 将会是 null</td>
</tr>
<tr>
<td>isOngoing()</td>
<td>通知的 flag 是否有 <code>Notification.FLAG_ONGOING_EVENT</code></td>
</tr>
<tr>
<td>isClearable()</td>
<td>检查通知是否有 <code>Notification.FLAG_ONGOING_EVENT</code> 或 <code>Notification.FLAG_NO_CLEAR</code> 标志</td>
</tr>
</tbody></table>
<h2 id="判断服务是否启用"><a href="#判断服务是否启用" class="headerlink" title="判断服务是否启用"></a>判断服务是否启用</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">notificationListenerEnabled</span><span class="params">(context: <span class="type">Context</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> NotificationManagerCompat.getEnabledListenerPackages(context).contains(context.packageName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a>打开设置</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line">    <span class="keyword">val</span> intent = Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS)</span><br><span class="line">    <span class="keyword">if</span> (intent.resolveActivity(packageManager) != <span class="literal">null</span>) &#123;</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.android.google.cn/reference/android/service/notification/NotificationListenerService.html">NotificationListenerService | Android Developers</a></p>
<p><a href="https://developer.android.google.cn/reference/android/service/notification/StatusBarNotification.html">StatusBarNotification | Android Developers</a></p>
<p><a href="https://developer.android.google.cn/reference/android/app/Notification.html">Notification | Android Developers</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>通知栏</tag>
      </tags>
  </entry>
  <entry>
    <title>XML 中的转义字符</title>
    <url>/blogs/2018/06/09/xml-%E4%B8%AD%E7%9A%84%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table>
<thead>
<tr>
<th>字符</th>
<th>转义序列</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>&amp;amp;</td>
</tr>
<tr>
<td>&lt;</td>
<td>&amp;lt;</td>
</tr>
<tr>
<td>&gt;</td>
<td>&amp;gt;</td>
</tr>
<tr>
<td>“</td>
<td>&amp;quot;</td>
</tr>
<tr>
<td>‘</td>
<td>&amp;apos;</td>
</tr>
</tbody></table>
<span id="more"></span>

<p>注意</p>
<ul>
<li>转义序列的字符之间不能有空格</li>
<li>转义序列必须以 <code>;</code> 结束</li>
<li>单独出现的 <code>&amp;</code> 不会被认为是转义的开始</li>
<li>区分大小写</li>
</ul>
<p>但是严格来说，在 XML 中只有 <code>&lt;</code> 和 <code>&amp;</code> 是非法的，其它三个都是可以合法存在的，但是，把它们都进行转义是一个好的习惯。</p>
<h2 id="lt-CDATA-gt"><a href="#lt-CDATA-gt" class="headerlink" title="&lt;![CDATA[]]&gt;"></a>&lt;![CDATA[]]&gt;</h2><p>被 <code>&lt;![CDATA[]]&gt;</code> 这个标记所包含的内容将表示为纯文本，比如 <code>&lt;![CDATA[&lt;]]&gt;</code> 表示文本内容 <code>&lt;</code>。</p>
<p>注意</p>
<ul>
<li>此部分不能再包含 <code>]]&gt;</code></li>
<li>不允许嵌套使用</li>
<li><code>]]&gt;</code> 这部分不能包含空格或者换行</li>
</ul>
<h2 id="转义字符和-lt-CDATA-gt-的区别"><a href="#转义字符和-lt-CDATA-gt-的区别" class="headerlink" title="转义字符和 &lt;![CDATA[]]&gt; 的区别"></a>转义字符和 &lt;![CDATA[]]&gt; 的区别</h2><ul>
<li><code>&lt;![CDATA[]]&gt;</code> 不能适用所有情况，转义字符可以</li>
<li>对于短字符串使用 <code>&lt;![CDATA[]]&gt;</code> 写起来啰嗦，对于长字符串使用转义字符写起来可读性差</li>
<li><code>&lt;![CDATA[]]&gt;</code> 表示 XML 解析器忽略解析，所以更快</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[&lt;![CDATA[]]&gt;和转义字符 - catgatp - 博客园](<a href="https://www.cnblogs.com/catgatp/p/6403382.html">https://www.cnblogs.com/catgatp/p/6403382.html</a>)</p>
]]></content>
      <categories>
        <category>Android</category>
        <category>XML</category>
      </categories>
      <tags>
        <tag>转义字符</tag>
      </tags>
  </entry>
  <entry>
    <title>生命周期</title>
    <url>/blogs/2018/09/15/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="Activity-生命周期"><a href="#Activity-生命周期" class="headerlink" title="Activity 生命周期"></a>Activity 生命周期</h2><ol>
<li><p>onCreate</p>
</li>
<li><p>onRestart</p>
<p> 完全不可见的 Activity 重新回到前台显示后才会被调用</p>
</li>
<li><p>onStart</p>
<p> Activity 销毁重建时才会被调用</p>
</li>
<li><p>onRestoreInstanceState</p>
<p> Activity 销毁重建时才会被调用</p>
</li>
<li><p>onResume</p>
</li>
<li><p>onAttachedToWindow</p>
</li>
<li><p>onPause</p>
</li>
<li><p>onSaveInstanceState</p>
<p> Activity 销毁重建时才会被调用</p>
</li>
<li><p>onStop</p>
</li>
<li><p>onDestroy</p>
</li>
</ol>
<h2 id="Fragment-生命周期"><a href="#Fragment-生命周期" class="headerlink" title="Fragment 生命周期"></a>Fragment 生命周期</h2><ol>
<li><p>onAttach</p>
</li>
<li><p>onCreate</p>
</li>
<li><p>onCreateView</p>
</li>
<li><p>onViewCreated</p>
</li>
<li><p>onActivityCreated</p>
</li>
<li><p>onViewStateRestored</p>
<p> 跟 Activity 不一样的的是，该方法一定会被调用</p>
</li>
<li><p>onStart</p>
</li>
<li><p>onResume</p>
</li>
<li><p>onPause</p>
</li>
<li><p>onSaveInstanceState</p>
<p>Fragment 销毁重建时才会被调用</p>
</li>
<li><p>onStop</p>
</li>
<li><p>onDestroyView</p>
</li>
<li><p>onDestroy</p>
</li>
<li><p>onDetach</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>生命周期</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 多线程</title>
    <url>/blogs/2018/02/01/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Java 的重要功能之一就是内部支持多线程——在一个程序中允许同时运行多个任务。<br>在单处理器系统中，多个线程共享 CPU 时间称为时间共享，而操作系统负责调度即分配资源给它们。这种安排是切实可行的，因为 CPU 的大部分时间都是空闲的。例如，在等待用户输入数据的时候，CPU 什么也不做。<br>多线程的应用主要分为两个方面：提高应用运算速度、缩短响应时间。对于计算量比较大的任务，可以把任务分解成多个可以并行运算的小任务，每个小任务由一个线程执行运算，以提高运算速度。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入一个数字：&quot;</span>);</span><br><span class="line">            <span class="keyword">long</span> number = scanner.nextLong();</span><br><span class="line">            <span class="keyword">if</span> (number &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            PrimeNumberTester primeNumberTester = <span class="keyword">new</span> PrimeNumberTester();</span><br><span class="line">            primeNumberTester.countPrimeNumber(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeNumberTester</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试输入的整数是否是质数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPrimeNumber</span><span class="params">(<span class="keyword">long</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sqrNumber = (<span class="keyword">long</span>) Math.sqrt(number);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">2</span>; i &lt;= sqrNumber; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试小于等于指定整数中质数的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">countPrimeNumber</span><span class="params">(<span class="keyword">long</span> upperBound)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">2</span>; i &lt;= upperBound; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isPrimeNumber(i)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;小于 &quot;</span> + upperBound + <span class="string">&quot; 的质数个数：&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果示例</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">请输入一个数字：<span class="number">12345678</span></span><br><span class="line"><span class="number">1234567</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line">小于 <span class="number">12345678</span> 的质数个数：<span class="number">809227</span></span><br><span class="line">请输入一个数字：小于 <span class="number">1234567</span> 的质数个数：<span class="number">95360</span></span><br><span class="line">请输入一个数字：小于 <span class="number">123456</span> 的质数个数：<span class="number">11601</span></span><br><span class="line">请输入一个数字：</span><br></pre></td></tr></table></figure>

<p>运行这个程序发现，如果输入一个较大的数字，程序对输入没有响应，必须等程序计算完成后才能接收用户的输入，这给用户的体验是很不好的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 的四种引用</title>
    <url>/blogs/2018/05/10/java-%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h2 id="强引用（Strong-Reference）"><a href="#强引用（Strong-Reference）" class="headerlink" title="强引用（Strong Reference）"></a>强引用（Strong Reference）</h2><p>强引用就是程序代码中普遍存在的，类似 <code>Object obj = new Object()</code> 这样的引用，只要强引用存在，垃圾收集器永远不会回收掉被引用的对象。</p>
<h2 id="软引用（Soft-Reference）"><a href="#软引用（Soft-Reference）" class="headerlink" title="软引用（Soft Reference）"></a>软引用（Soft Reference）</h2><p>软引用用来描述一些还有用，但并非必需的对象，对于<strong>只被软引用关联着的对象</strong>，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。</p>
<p>实现类 <code>java.lang.ref.SoftReference</code></p>
<h2 id="弱引用（Weak-Reference）"><a href="#弱引用（Weak-Reference）" class="headerlink" title="弱引用（Weak Reference）"></a>弱引用（Weak Reference）</h2><p>弱引用也是用来描述非必需对象的，但它的强度比软引用更弱一些，只被弱引用关联的对象只能生存到下次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p>
<p>实现类 <code>java.lang.ref.WeakReference</code></p>
<h2 id="虚引用（Phantom-Reference）"><a href="#虚引用（Phantom-Reference）" class="headerlink" title="虚引用（Phantom Reference）"></a>虚引用（Phantom Reference）</h2><p>虚引用也称为幽灵引用或幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。</p>
<p>实现类 <code>java.lang.ref.PhantomReference</code></p>
<span id="more"></span>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/zedosu/p/6632249.html">java的4种引用 强软弱虚 - zedosu - 博客园</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>四种引用</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 获取网络重定向 URL</title>
    <url>/blogs/2018/08/23/java-%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E9%87%8D%E5%AE%9A%E5%90%91-url/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetRedirectUrl</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取重定向地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 原始 URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 重定向的 URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRedirectUrl</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpURLConnection conn = (HttpURLConnection) <span class="keyword">new</span> URL(url).openConnection();</span><br><span class="line">        conn.setInstanceFollowRedirects(<span class="keyword">false</span>);</span><br><span class="line">        conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> conn.getHeaderField(<span class="string">&quot;Location&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>重定向</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Junit4 进行单元测试</title>
    <url>/blogs/2018/02/01/%E4%BD%BF%E7%94%A8-junit4-%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<hr>
<h2 id="常用-API"><a href="#常用-API" class="headerlink" title="常用 API"></a>常用 API</h2><ul>
<li><p>@org.junit.Test</p>
<p>标记这是一个测试方法</p>
</li>
<li><p>@org.junit.Before</p>
<p>标记每个测试方法执行前都会执行一次的方法，可进行一些方法运行前的准备工作。方法名称随意，但必须是 <code>void</code> 返回类型，并且没有参数</p>
</li>
<li><p>@org.junit.After</p>
<p>标记每个测试方法执行后都会执行一次的方法，可进行一些方法运行后的结束工作。方法名称随意，但必须是 <code>void</code> 返回类型，并且没有参数</p>
</li>
<li><p>@org.junit.BeforeClass</p>
<p>标记测试类初始化时执行的方法，可进行一些初始化工作。方法名称随意，但必须使用 <code>public</code> 和 <code>static</code> 修饰，返回类型为 <code>void</code> ，并且没有参数</p>
</li>
<li><p>@org.junit.AfterClass</p>
<p>标记测试类中所有测试方法执行完毕后执行的方法，可进行一些结束工作。方法名称随意，但必须使用 <code>public</code> 和 <code>static</code> 修饰，返回类型为 <code>void</code> ，并且没有参数</p>
</li>
<li><p>@org.junit.Ignore</p>
<p>标记需要忽略的测试方法。标记后测试方法不会被执行</p>
</li>
<li><p>@org.junit.Test(timeout = 1000L)</p>
<p>设置测试方法的超时（1000ms）</p>
</li>
<li><p>@org.junit.Test(expected = Exception.class)</p>
<p>设置待测试方法可能抛出的异常</p>
</li>
<li><p>@org.junit.runner.RunWith</p>
<p>指定 JUnit 框架的测试代码运行器 Runner</p>
</li>
<li><p>@org.junit.runner.RunWith(org.junit.runners.Parameterized.class)</p>
<p>参数化测试</p>
</li>
<li><p>@org.junit.runners.Parameterized.Parameters</p>
<p>标注获取类构造函数的参数的方法。方法名称随意，但必须使用 <code>public</code> 和 <code>static</code> 修饰，返回类型为 java.util.Collection ，并且没有参数</p>
</li>
<li><p>@org.junit.runner.RunWith(org.junit.runners.Suite.class)</p>
<p>打包测试</p>
</li>
<li><p>@Suite.SuiteClasses({Class1Test.class, Class2Test.class})</p>
<p>标注这个类是一个打包测试类，把需要打包的测试类作为参数传递给该注解就可以了</p>
</li>
</ul>
<span id="more"></span>

<h2 id="待测试类"><a href="#待测试类" class="headerlink" title="待测试类"></a>待测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 待测试方法 method1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 待测试方法 method2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 待测试方法 method3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 待测试方法 method4</span></span><br><span class="line"><span class="comment">     * 有 bug 的方法：出现无限循环</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method4</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 待测试方法 method5</span></span><br><span class="line"><span class="comment">     * 可能抛出异常的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method5</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Parameter should be 0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试类是一个独立的类，没有任何父类。测试类的名字也可以任意命名，没有任何局限性</span></span><br><span class="line"><span class="comment"> * 一般命名规范为 待测试类名+Test 。如待测试类名为 Main ，则测试类名应为 MainTest</span></span><br><span class="line"><span class="comment"> * 我们不能通过类的声明来判断它是不是一个测试类，它与普通类的区别在于它内部的方法的声明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Main main;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 每个测试方法执行前都会执行一次的方法，可进行一些方法运行前的准备工作</span></span><br><span class="line"><span class="comment">     * 方法名称随意，但必须是 void 返回类型，并且没有参数</span></span><br><span class="line"><span class="comment">     * 可有可无</span></span><br><span class="line"><span class="comment">     * 用 @org.junit.Before 标注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.junit.<span class="function">Before</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        main = <span class="keyword">new</span> Main();</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 每个测试方法执行后都会执行一次的方法，可进行一些方法运行后的结束工作</span></span><br><span class="line"><span class="comment">     * 方法名称随意，但必须是 void 返回类型，并且没有参数</span></span><br><span class="line"><span class="comment">     * 可有可无</span></span><br><span class="line"><span class="comment">     * 用 @org.junit.After 标注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.junit.<span class="function">After</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        main = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 对 Main.method1() 方法测试的测试方法</span></span><br><span class="line"><span class="comment">     * 方法名称随意。一般命名规范为 test+待测试方法名 。</span></span><br><span class="line"><span class="comment">     * 如待测试方法名为 method1 ，则测试方法名应为 testMethod1</span></span><br><span class="line"><span class="comment">     * 用 @org.junit.Test 标注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.junit.<span class="function">Test</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法体内写测试内容</span></span><br><span class="line">        <span class="comment">// 这个测试会通过</span></span><br><span class="line">        org.junit.Assert.assertEquals(<span class="number">1</span>, main.method1());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 对 Main.method2(int) 方法测试的测试方法</span></span><br><span class="line"><span class="comment">     * 用 @org.junit.Test 标注</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 用 @org.junit.Ignore 标注后的测试方法不会被执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.junit.<span class="function">Test</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法体内写测试内容</span></span><br><span class="line">        <span class="comment">// 这个测试会失败</span></span><br><span class="line">        org.junit.Assert.assertEquals(<span class="number">1</span>, main.method2(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 对 Main.method3() 方法测试的测试方法</span></span><br><span class="line"><span class="comment">     * 用 @org.junit.Test 标注</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 用 @org.junit.Ignore 标注后的测试方法不会被执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="meta">@org</span>.junit.<span class="function">Ignore</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法体内写测试内容</span></span><br><span class="line">        <span class="comment">// 这个测试会忽略</span></span><br><span class="line">        org.junit.Assert.assertEquals(<span class="number">3</span>, main.method3());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 对 Main.method4(int) 方法测试的测试方法</span></span><br><span class="line"><span class="comment">     * 参数 timeout = 1000L 设置测试方法的超时时间，超过了这个时间，方法就会被系统强行终止</span></span><br><span class="line"><span class="comment">     * 用 @org.junit.Test 标注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.junit.Test(timeout = <span class="number">1000L</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法体内写测试内容</span></span><br><span class="line">        org.junit.Assert.assertEquals(<span class="number">4</span>, main.method4(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 对 Main.method5(int) 方法测试的测试方法</span></span><br><span class="line"><span class="comment">     * 参数 expected = IllegalArgumentException.class 设置待测试方法可能抛出的异常</span></span><br><span class="line"><span class="comment">     * 用 @org.junit.Test 标注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.junit.Test(expected = IllegalArgumentException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法体内写测试内容</span></span><br><span class="line">        org.junit.Assert.assertEquals(<span class="number">5</span>, main.method5(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.company.Main;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 org.junit.runners.Parameterized 运行器进行参数化测试</span></span><br><span class="line"><span class="meta">@RunWith(Parameterized.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> param;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成参数</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.<span class="function">Parameters</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">static</span> Collection <span class="title">data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，对变量进行初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main2Test</span><span class="params">(<span class="keyword">int</span> param, <span class="keyword">int</span> result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.param = param;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertEquals(result, <span class="keyword">new</span> Main().method2(param));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用 org.junit.runners.Suite 运行器进行打包测试</span></span><br><span class="line"><span class="comment"> * @Suite.SuiteClasses 标注这个类是一个打包测试类，并指定需要打包测试的测试类</span></span><br><span class="line"><span class="comment"> * 类名随意，类内容为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(Suite.class)</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123;</span><br><span class="line">        MainTest.class,</span><br><span class="line">        Main2Test.class</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllMainTests</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Junit4</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化</title>
    <url>/blogs/2019/03/23/%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>Java 的 <code>Serializable</code> 接口是一个标记接口，它是一个空接口。实现它只是标记这个类是可序列化的。</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">               name.equals(person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>可以使用以下的方法将一个对象序列化到一个文件中；从文件中反序列化出对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        serialize(person, <span class="string">&quot;file&quot;</span>);</span><br><span class="line">        Object obj = deserialize(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        System.out.println(obj == person); <span class="comment">// false</span></span><br><span class="line">        System.out.println(obj.equals(person)); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象序列化到文件中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object obj, String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">        FileOutputStream output = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(output);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从文件中反序列化出对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">deserialize</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">        FileInputStream input = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(input);</span><br><span class="line"></span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li><p>静态属性和方法都不会被序列化</p>
</li>
<li><p>如果父类也实现了 <code>Serializable</code> 了，父类的属性也会被序列化；否则，父类的属性不会被序列化</p>
</li>
<li><p>如果属性是引用类型，但是引用类型没有实现 <code>Serializable</code> 接口，JVM 将会抛出 <code>java.io.NotSerializableException</code> 异常</p>
</li>
</ul>
<h2 id="关闭部分属性的序列化——transient-关键字"><a href="#关闭部分属性的序列化——transient-关键字" class="headerlink" title="关闭部分属性的序列化——transient 关键字"></a>关闭部分属性的序列化——transient 关键字</h2><p>也许你不需要序列化对象的全部属性，可以使用 Java 的 <code>transient</code> 关键字关闭该属性的序列化。</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Name name = <span class="keyword">new</span> Name();</span><br><span class="line">    <span class="comment">// age 属性将不会被序列化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Name <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h2><p>在两端进行网络传输序列化对象的过程中，如果两端使用的类的版本不同，将可能导致序列化错误或失败。因此 Java 要求实现序列化的类内部必须声明一个 <code>serialVersionUID</code> 静态属性（即使没有声明，JVM 也会自动声明该属性），用于标识不同的序列化类。只有两个类的序列化标识相同，Java 才会进行序列化的工作。</p>
<h2 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h2><h3 id="定制序列化策略"><a href="#定制序列化策略" class="headerlink" title="定制序列化策略"></a>定制序列化策略</h3><p>有时候除了传输对象本身的数据，还需要传输一些额外的信息，可以在类中假如以下的方法来定制序列化和反序列化的策略。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObjectNoData</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>;</span><br></pre></td></tr></table></figure>

<p>值得注意的是，这些方法的访问控制关键词都是 <code>private</code>，由此可知 Java 是基于反射机制实现序列化的。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.defaultWriteObject();</span><br><span class="line">        <span class="comment">// 序列化一个 Date 对象，标记序列化当前对象的时间</span></span><br><span class="line">        out.writeObject(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">// 从输入流中读取 Date 对象</span></span><br><span class="line">        Date date = (Date) in.readObject();</span><br><span class="line">        System.out.println(date.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="限制序列化对象的数量"><a href="#限制序列化对象的数量" class="headerlink" title="限制序列化对象的数量"></a>限制序列化对象的数量</h3><p>设想一个场景，如果一个实现了 <code>Serializable</code> 接口的单例类，进行了序列化和反序列话的操作，这样就破坏了原有的单例模式。因此，Java 提供了另外一种方法，让我们可以在序列化和反序列化是，可以根据需要写入或读取指定的实例。使用这种机制，需要在序列化类中加入以下的两个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ANY-ACCESS-<span class="function">MODIFIER Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>;</span><br><span class="line">ANY-ACCESS-<span class="function">MODIFIER Object <span class="title">writeReplace</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>;</span><br></pre></td></tr></table></figure>

<p><code>ANY-ACCESS-MODIFIER</code> 表示访问控制符可以是 <code>public</code>、<code>private</code>、<code>protected</code> 或者 <code>package-private</code>（包级访问）</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectStreamException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Person INSTANCE = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">writeReplace</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完全自定义序列化的策略——Externalizable-接口"><a href="#完全自定义序列化的策略——Externalizable-接口" class="headerlink" title="完全自定义序列化的策略——Externalizable 接口"></a>完全自定义序列化的策略——Externalizable 接口</h2><p><code>Externalizable</code> 接口继承自 <code>Serializable</code> 接口，与 <code>Serializable</code> 接口不同的是，它的内部定义了两个方法用于制定序列化和反序列化的策略。它要求序列化类必须拥有一个无参的构造方法。</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeObject(<span class="keyword">this</span>.name);</span><br><span class="line">        out.writeInt(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = (String) in.readObject();</span><br><span class="line">        <span class="keyword">this</span>.age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h2><ul>
<li><p>实现 Serializable 接口，并且定义了 writeObject 方法和 readObject 方法的类跟实现了 Externalizable 的类有什么异同（除了在实现 Externalizable 需要无参的构造方法上）?</p>
</li>
<li><p>Externalizable 继承了 Serializable 接口，如果同时定义了 writeExternal、readExternal、writeObject、readObject、writeReplace、readResolve 这些方法，这些方法将会是按照什么样的顺序调用的？</p>
</li>
<li><p>readObjectNoData</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Serializable</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/blogs/2018/02/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>句号匹配任意单个字符除了换行符</td>
</tr>
<tr>
<td>[ ]</td>
<td>字符种类。匹配方括号内的任意字符</td>
</tr>
<tr>
<td>[^ ]</td>
<td>否定的字符种类。匹配除了方括号里的任意字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配 &gt;=0 个重复的在 * 号之前的字符</td>
</tr>
<tr>
<td>+</td>
<td>匹配 &gt;=1 个重复的 + 号前的字符</td>
</tr>
<tr>
<td>?</td>
<td>标记 ? 之前的字符为可选</td>
</tr>
<tr>
<td>{n,m}</td>
<td>匹配 num 个大括号之前的字符 (n &lt;= num &lt;= m)</td>
</tr>
<tr>
<td>(xyz)</td>
<td>字符集, 匹配与 xyz 完全相等的字符串</td>
</tr>
<tr>
<td>&#124;</td>
<td>或运算符,匹配符号前或后的字符</td>
</tr>
<tr>
<td>\</td>
<td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \ &#124;</code></td>
</tr>
<tr>
<td>^</td>
<td>从开始行开始匹配</td>
</tr>
<tr>
<td>$</td>
<td>从末端开始匹配</td>
</tr>
</tbody></table>
<span id="more"></span>

<h2 id="简写字符集"><a href="#简写字符集" class="headerlink" title="简写字符集"></a>简写字符集</h2><table>
<thead>
<tr>
<th>简写</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>除换行符外的所有字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配所有字母数字, 等同于 <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td>\W</td>
<td>匹配所有非字母数字, 即符号, 等同于: <code>[^\w]</code></td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字: <code>[0-9]</code></td>
</tr>
<tr>
<td>\D</td>
<td>匹配非数字: <code>[^\d]</code></td>
</tr>
<tr>
<td>\s</td>
<td>匹配所有空格字符, 等同于: <code>[\t\n\f\r\p&#123;Z&#125;]</code></td>
</tr>
<tr>
<td>\S</td>
<td>匹配所有非空格字符: <code>[^\s]</code></td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td>\p</td>
<td>匹配 CR/LF (等同于 <code>\r\n</code>)，用来匹配 DOS 行终止符</td>
</tr>
</tbody></table>
<h2 id="前后关联约束-前后预查"><a href="#前后关联约束-前后预查" class="headerlink" title="前后关联约束(前后预查)"></a>前后关联约束(前后预查)</h2><table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>?=</td>
<td>前置约束-存在</td>
</tr>
<tr>
<td>?!</td>
<td>前置约束-排除</td>
</tr>
<tr>
<td>?&lt;=</td>
<td>后置约束-存在</td>
</tr>
<tr>
<td>?&lt;!</td>
<td>后置约束-排除</td>
</tr>
</tbody></table>
<h2 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h2><table>
<thead>
<tr>
<th>标志</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>忽略大小写</td>
</tr>
<tr>
<td>g</td>
<td>全局搜索</td>
</tr>
<tr>
<td>m</td>
<td>多行的: 锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始</td>
</tr>
</tbody></table>
<hr>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/zeeshanu/learn-regex">zeeshanu/learn-regex: Learn regex the easy way</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code 常用插件</title>
    <url>/blogs/2018/08/23/visual-studio-code-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="IntelliJ-IDEA-Keybindings"><a href="#IntelliJ-IDEA-Keybindings" class="headerlink" title="IntelliJ IDEA Keybindings"></a>IntelliJ IDEA Keybindings</h2><p>安装插件 <a href="https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings">IntelliJ IDEA Keybindings</a></p>
<p>即使安装上面的插件之后，也不能通过 <code>ctrl+shift+u</code> 将选中的英文切换大小写，可以通过安装 <a href="https://marketplace.visualstudio.com/items?itemName=eprincev-egor.toggle-upper-case">toggle-upper-case</a> 插件解决。<br>安装之后修改 <code>extension.toggleUpperCase</code> 的快捷键为 <code>ctrl+shift+u</code>，并把默认的转换成大写 <code>editor.action.transformToUppercase</code> 的快捷键删除。</p>
<p>对于只包含空白符的一行，光标在行尾处时，按下 <code>Backspace</code> 键之后，在 Visual Studio Code 中只会删除一个缩进位的空白符，而不会像 IntelliJ IDEA 那样直接删除整行。如果希望这个行为跟 IntelliJ IDEA 一致，可以通过安装 <a href="https://marketplace.visualstudio.com/items?itemName=jasonlhy.hungry-delete">Hungry Delete</a> 插件解决。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=thoughtsdump.custom-xml-formatter">custom xml formatter</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens — Git supercharged</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=techer.open-in-browser">open in browser</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">Path Intellisense</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">vscode-icons</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>Visual Studio Code</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 居中大全</title>
    <url>/blogs/2018/11/26/css-%E5%B1%85%E4%B8%AD%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p>假设 HTML 代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基础的 CSS 样式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="absolute-负-margin"><a href="#absolute-负-margin" class="headerlink" title="absolute + 负 margin"></a>absolute + 负 margin</h2><p><strong>缺点</strong>：需要知道子元素的宽高。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="comment">/* 指定宽高 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* 将 margin 设置为负的宽高的一半 */</span></span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="absolute-margin-auto"><a href="#absolute-margin-auto" class="headerlink" title="absolute + margin: auto"></a>absolute + margin: auto</h2><p><strong>缺点</strong>：需要知道子元素的宽高。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="comment">/* 指定宽高 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="absolute-calc"><a href="#absolute-calc" class="headerlink" title="absolute + calc"></a>absolute + calc</h2><p><strong>缺点</strong>：需要知道子元素的宽高。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">  <span class="comment">/* 指定宽高 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="text-align-center-vertical-align-middle-line-height"><a href="#text-align-center-vertical-align-middle-line-height" class="headerlink" title="text-align: center + vertical-align: middle + line-height"></a>text-align: center + vertical-align: middle + line-height</h2><p><strong>缺点</strong>：需要知道父元素的高。父元素需要设置跟自身高度相等的 line-height。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="comment">/* 跟父元素高度一样的 line-height */</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="comment">/* 水平居中 */</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="comment">/* 垂直居中 */</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="comment">/* vertical-align 和父元素的 text-align 属性都只应用于行内元素 */</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">line-height</span>: initial;</span><br><span class="line">  <span class="comment">/* 修正文字对齐 */</span></span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="absolute-transform-translate-50-50"><a href="#absolute-transform-translate-50-50" class="headerlink" title="absolute + transform: translate(-50%, -50%)"></a>absolute + transform: translate(-50%, -50%)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="display-table-cell-text-align-center-vertical-align-middle"><a href="#display-table-cell-text-align-center-vertical-align-middle" class="headerlink" title="display: table-cell + text-align: center + vertical-align: middle"></a>display: table-cell + text-align: center + vertical-align: middle</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-justify-content-center-align-items-center"><a href="#flex-justify-content-center-align-items-center" class="headerlink" title="flex + justify-content: center + align-items: center"></a>flex + justify-content: center + align-items: center</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-margin-auto"><a href="#flex-margin-auto" class="headerlink" title="flex + margin: auto"></a>flex + margin: auto</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="display-grid-align-self-center-justify-self-center"><a href="#display-grid-align-self-center-justify-self-center" class="headerlink" title="display: grid + align-self: center + justify-self: center"></a>display: grid + align-self: center + justify-self: center</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: center;</span><br><span class="line">  justify-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>居中</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 常用属性</title>
    <url>/blogs/2018/02/05/css-%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>background</td>
<td>简写属性，作用是将背景属性设置在一个声明中</td>
</tr>
<tr>
<td>background-attachment</td>
<td>背景图像是否固定或者随着页面的其余部分滚动</td>
</tr>
<tr>
<td>background-color</td>
<td>设置元素的背景颜色</td>
</tr>
<tr>
<td>background-image</td>
<td>把图像设置为背景</td>
</tr>
<tr>
<td>background-position</td>
<td>设置背景图像的起始位置</td>
</tr>
<tr>
<td>background-repeat</td>
<td>设置背景图像是否及如何重复</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="number">#ff0000</span> <span class="built_in">url</span>(<span class="string">image.png</span>) no-repeat fixed center;</span><br><span class="line"><span class="attribute">background-attachment</span>: scroll|fixed;</span><br><span class="line"><span class="attribute">background-color</span>: transparent|color_name|hex_number|rgb_number;</span><br><span class="line"><span class="attribute">background-color</span>: transparent|red|<span class="number">#ff0000</span>|<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="attribute">background-image</span>: none|<span class="built_in">url</span>(<span class="string">&#x27;URL&#x27;</span>);</span><br><span class="line"><span class="attribute">background-image</span>: none|<span class="built_in">url</span>(<span class="string">image.png</span>);</span><br><span class="line"><span class="attribute">background-position</span>: top left|x% y%|xpos ypos</span><br><span class="line">background-repeat: repeat|repeat-x|repeat-y|no-repeat;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h2><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>top left<br>top center<br>top right<br>center left<br>center center<br>center right<br>bottom left<br>bottom center<br>bottom right</td>
<td>如果您仅规定了一个关键词，那么第二个值将是”center”。<br>默认值：0% 0%</td>
</tr>
<tr>
<td>x% y%</td>
<td>第一个值是水平位置，第二个值是垂直位置。<br>左上角是 0% 0%。右下角是 100% 100%。<br>如果您仅规定了一个值，另一个值将是 50%</td>
</tr>
<tr>
<td>xpos ypos</td>
<td>第一个值是水平位置，第二个值是垂直位置。<br>左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位。<br>如果您仅规定了一个值，另一个值将是50%。<br>您可以混合使用 % 和 position 值</td>
</tr>
</tbody></table>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>设置文本颜色</td>
</tr>
<tr>
<td>direction</td>
<td>设置文本方向</td>
</tr>
<tr>
<td>line-height</td>
<td>设置行高</td>
</tr>
<tr>
<td>letter-spacing</td>
<td>设置字符间距</td>
</tr>
<tr>
<td>text-align</td>
<td>对齐元素中的文本</td>
</tr>
<tr>
<td>text-decoration</td>
<td>向文本添加修饰</td>
</tr>
<tr>
<td>text-indent</td>
<td>缩进元素中文本的首行</td>
</tr>
<tr>
<td>text-transform</td>
<td>控制元素中的字母</td>
</tr>
<tr>
<td>white-space</td>
<td>设置元素中空白的处理方式</td>
</tr>
<tr>
<td>word-spacing</td>
<td>设置字间距</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">color</span>: color_name|hex_number|rgb_number;</span><br><span class="line"><span class="attribute">color</span>: red|<span class="number">#ff0000</span>|<span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="attribute">direction</span>: ltr|rtl;</span><br><span class="line"><span class="attribute">line-height</span>: normal|number|length|%;</span><br><span class="line"><span class="attribute">line-height</span>: normal|<span class="number">2</span>|<span class="number">20px</span>|<span class="number">200%</span>;</span><br><span class="line"><span class="attribute">letter-spacing</span>: normal|length;</span><br><span class="line"><span class="attribute">letter-spacing</span>: normal|-<span class="number">0.5em</span>;</span><br><span class="line"><span class="attribute">text-align</span>: left|right|center|justify;</span><br><span class="line"><span class="attribute">text-decoration</span>: none|underline|overline|line-through|blink;</span><br><span class="line"><span class="attribute">text-indent</span>: length|%;</span><br><span class="line"><span class="attribute">text-indent</span>: <span class="number">20px</span>|<span class="number">20%</span>;</span><br><span class="line"><span class="attribute">text-transform</span>: none|capitalize|uppercase|lowercase;</span><br><span class="line"><span class="attribute">white-space</span>: normal|pre|nowrap|pre-wrap|pre-line;</span><br><span class="line"><span class="attribute">word-spacing</span>: normal|length;</span><br><span class="line"><span class="attribute">word-spacing</span>: normal|<span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>font</td>
<td>简写属性。作用是把所有针对字体的属性设置在一个声明中</td>
</tr>
<tr>
<td>font-family</td>
<td>设置字体系列</td>
</tr>
<tr>
<td>font-size</td>
<td>设置字体的尺寸</td>
</tr>
<tr>
<td>font-style</td>
<td>设置字体风格</td>
</tr>
<tr>
<td>font-variant</td>
<td>以小型大写字体或者正常字体显示文本</td>
</tr>
<tr>
<td>font-weight</td>
<td>设置字体的粗细</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>: italic bold <span class="number">12px</span> arial,sans-serif;</span><br><span class="line"><span class="attribute">font-family</span>: family-name/generic-family;</span><br><span class="line"><span class="attribute">font-family</span>: monospace;</span><br><span class="line"><span class="attribute">font-family</span>: courier;</span><br><span class="line"><span class="attribute">font-size</span>: medium|smaller|larger|length|%;</span><br><span class="line"><span class="attribute">font-size</span>: medium|smaller|larger|<span class="number">20px</span>|<span class="number">200%</span>;</span><br><span class="line"><span class="attribute">font-style</span>: normal|italic|oblique;</span><br><span class="line"><span class="attribute">font</span>-variantnt: normal|small-caps;</span><br><span class="line"><span class="attribute">font-weight</span>: normal|bold|bolder|lighter|<span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h2 id="通用字体系列"><a href="#通用字体系列" class="headerlink" title="通用字体系列"></a>通用字体系列</h2><p>除了各种特定字体系列外（如 Times、Verdana、Helvetica 或 Arial），CSS 还定义了 5 种通用字体系列：</p>
<h3 id="Serif"><a href="#Serif" class="headerlink" title="Serif"></a>Serif</h3><p>这些字体成比例，而且有上下短线。如果字体中的所有字符根据其不同大小有不同的宽度，则成该字符是成比例的。例如，小写 i 和小写 m 的宽度就不同。上下短线是每个字符笔划末端的装饰，比如小写 l 顶部和底部的短线，或大写 A 两条腿底部的短线。Serif 字体的例子包括 Times、Georgia 和 New Century Schoolbook。</p>
<h3 id="Sans-serif"><a href="#Sans-serif" class="headerlink" title="Sans-serif"></a>Sans-serif</h3><p>这些字体是成比例的，而且没有上下短线。Sans-serif 字体的例子包括 Helvetica、Geneva、Verdana、Arial 或 Univers。<br>Monospace 字体<br>Monospace 字体并不是成比例的。它们通常用于模拟打字机打出的文本、老式点阵打印机的输出，甚至更老式的视频显示终端。采用这些字体，每个字符的宽度都必须完全相同，所以小写的 i 和小写的 m 有相同的宽度。这些字体可能有上下短线，也可能没有。如果一个字体的字符宽度完全相同，则归类为 Monospace 字体，而不论是否有上下短线。Monospace 字体的例子包括 Courier、Courier New 和 Andale Mono。</p>
<h3 id="Cursive"><a href="#Cursive" class="headerlink" title="Cursive"></a>Cursive</h3><p>这些字体试图模仿人的手写体。通常，它们主要由曲线和 Serif 字体中没有的笔划装饰组成。例如，大写 A 再其左腿底部可能有一个小弯，或者完全由花体部分和小的弯曲部分组成。Cursive 字体的例子包括 Zapf Chancery、Author 和 Comic Sans。</p>
<h3 id="Fantasy"><a href="#Fantasy" class="headerlink" title="Fantasy"></a>Fantasy</h3><p>这些字体无法用任何特征来定义，只有一点是确定的，那就是我们无法很容易地将其规划到任何一种其他的字体系列当中。这样的字体包括 Western、Woodblock 和 Klingon。</p>
<p>理论上讲，用户安装的任何字体系列都会落入到上述某种通用系列中，但实际上可能并非如此，不过例外情况（如果有的话）往往很少。</p>
<h2 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h2><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>xx-small<br>x-small<br>small<br>medium<br>large<br>x-large<br>xx-large</td>
<td>把字体的尺寸设置为不同的尺寸，从 xx-small 到 xx-large。<br>默认值：medium</td>
</tr>
<tr>
<td>smaller</td>
<td>把 font-size 设置为比父元素更小的尺寸</td>
</tr>
<tr>
<td>larger</td>
<td>把 font-size 设置为比父元素更大的尺寸</td>
</tr>
<tr>
<td><em>length</em></td>
<td>把 font-size 设置为一个固定的值</td>
</tr>
<tr>
<td><em>%</em></td>
<td>把 font-size 设置为基于父元素的一个百分比值</td>
</tr>
</tbody></table>
<h2 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h2><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td>默认值。定义标准的字符</td>
</tr>
<tr>
<td>bold</td>
<td>定义粗体字符</td>
</tr>
<tr>
<td>bolder</td>
<td>定义更粗的字符</td>
</tr>
<tr>
<td>lighter</td>
<td>定义更细的字符</td>
</tr>
<tr>
<td>100<br>200<br>300<br>400<br>500<br>600<br>700<br>800<br>900</td>
<td>定义由粗到细的字符。400 等同于 normal，而 700 等同于 bold</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 滤镜 - filter 属性</title>
    <url>/blogs/2018/11/27/css-%E6%BB%A4%E9%95%9C-filter-%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p>强大的 CSS filter</p>
<p>CSS 滤镜（filter）属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像、背景和边框的渲染。</p>
<p>CSS 标准中包括几个实现预定义效果的方法。您还可以引用一个 SVG 过滤器，该过滤器带有一个指向 SVG 过滤器元素的 URL。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>: none</span><br><span class="line">  | <span class="built_in">blur</span>( &lt;length&gt; )</span><br><span class="line">  | <span class="built_in">brightness</span>( &lt;number&gt; | &lt;percentage&gt; )</span><br><span class="line">  | <span class="built_in">contrast</span>( &lt;number&gt; | &lt;percentage&gt; )</span><br><span class="line">  | <span class="built_in">drop-shadow</span>( &lt;length&gt;&#123;<span class="number">2</span>,<span class="number">3</span>&#125; &lt;<span class="attribute">color</span>&gt;? )</span><br><span class="line">  | grayscale( &lt;number&gt; | &lt;percentage&gt; )</span><br><span class="line">  | hue-rotate( &lt;angle&gt; )</span><br><span class="line">  | invert( &lt;number&gt; | &lt;percentage&gt; )</span><br><span class="line">  | <span class="attribute">opacity</span>( &lt;number&gt; | &lt;percentage&gt; )</span><br><span class="line">  | saturate( &lt;number&gt; | &lt;percentage&gt; )</span><br><span class="line">  | sepia( &lt;number&gt; | &lt;percentage&gt; )</span><br><span class="line">  | url();</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认值。没有任何效果。</td>
</tr>
<tr>
<td>blur()</td>
<td>高斯模糊效果。length 值越大，图像越模糊。</td>
</tr>
<tr>
<td>brightness()</td>
<td>线性乘法。可以让图片看起来更亮或者更暗。</td>
</tr>
<tr>
<td>contrast()</td>
<td>对比度。调整图像的对比度。</td>
</tr>
<tr>
<td>drop-shadow()</td>
<td>给图像设置一个阴影效果。阴影是合成在图像下面，可以有模糊度的，可以以特定颜色画出的遮罩图的偏移版本。 函数接受 &lt;shadow&gt; （在 CSS3 背景中定义）类型的值，除了“inset”关键字是不允许的。该函数与已有的 box-shadow box-shadow 属性很相似；不同之处在于，通过滤镜，一些浏览器为了更好的性能会提供硬件加速</td>
</tr>
<tr>
<td>hue-rotate()</td>
<td>色相旋转</td>
</tr>
<tr>
<td>invert()</td>
<td>反转</td>
</tr>
<tr>
<td>grayscale()</td>
<td>将图像转换为灰度图像</td>
</tr>
<tr>
<td>sepia()</td>
<td>将图像转换为深褐色</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>filter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flex 布局</title>
    <url>/blogs/2018/07/11/flex-%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用于行内元素"><a href="#应用于行内元素" class="headerlink" title="应用于行内元素"></a>应用于行内元素</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称“容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称“项目”。</p>
<p><img src="/blogs/2018/07/11/flex-%E5%B8%83%E5%B1%80/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.png" alt="基本概念"></p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做 cross end。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。</p>
<h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="comment">/* 决定主轴的方向（即项目的排列方向） */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">    <span class="comment">/* 项目如果在轴线上排不下，该属性定义了项目如何换行 */</span></span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">    <span class="comment">/* flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap */</span></span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;  <span class="comment">/* default row nowrap */</span></span><br><span class="line">    <span class="comment">/* 定义了项目在主轴上的排列方式 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">    <span class="comment">/* 定义了项目在交叉轴上对齐方式 */</span></span><br><span class="line">    <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">    <span class="comment">/* 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用 */</span></span><br><span class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="comment">/* 定义项目的排列顺序。数值越小，排列越靠前，默认为 0 */</span></span><br><span class="line">    <span class="attribute">order</span>: &lt;integer&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</span></span><br><span class="line"><span class="comment">    如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）；如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</span></span><br><span class="line"><span class="comment">    如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小；如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</span></span><br><span class="line"><span class="comment">    负值对该属性无效。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。</span></span><br><span class="line"><span class="comment">    它可以设为跟 width 或 height 属性一样的值（比如 350px），则项目将占据固定空间。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</span></span><br><span class="line"><span class="comment">     该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</span></span><br><span class="line"><span class="comment">     建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="attribute">flex</span>: none | [ &lt;flex-grow&gt; &lt;flex-shrink&gt;? || &lt;flex-basis&gt; ]</span><br><span class="line">     /*</span><br><span class="line">     align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</span><br><span class="line">     该属性可能取 <span class="number">6</span> 个值，除了 auto，其他都与 align-items 属性完全一致</span><br><span class="line">     */</span><br><span class="line">     align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 块状元素和行内元素</title>
    <url>/blogs/2019/03/11/html-%E5%9D%97%E7%8A%B6%E5%85%83%E7%B4%A0%E5%92%8C%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p>HTML 中有块状元素也有行内元素，即使如此，也能通过 CSS 的 <code>display</code> 改变元素的默认效果。如使用 <code>display: block</code> 使得元素显示为块状元素效果，使用 <code>display: inline</code> 则可以使得元素显示为行内元素效果。</p>
<span id="more"></span>

<p>使用以下代码可得到默认的块状元素和行内元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tags = [</span><br><span class="line">  <span class="string">&#x27;&lt;html&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;base&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;head&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;link&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;meta&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;style&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;title&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;body&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;address&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;article&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;aside&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;footer&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;header&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;h1&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;h2&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;h3&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;h4&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;h5&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;h6&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;main&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;nav&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;section&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;blockquote&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;dd&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;div&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;dl&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;dt&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;figcaption&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;figure&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;hr&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;li&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;ol&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;p&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;pre&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;ul&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;a&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;abbr&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;b&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;bdi&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;bdo&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;br&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;cite&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;code&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;data&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;dfn&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;em&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;i&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;kbd&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;mark&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;q&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;rb&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;rp&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;rt&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;rtc&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;ruby&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;s&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;samp&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;small&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;span&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;strong&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;sub&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;sup&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;time&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;u&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;var&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;wbr&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;area&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;audio&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;img&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;map&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;track&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;video&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;embed&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;iframe&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;noembed&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;object&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;param&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;picture&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;source&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;canvas&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;noscript&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;script&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;del&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;ins&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;caption&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;col&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;colgroup&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;table&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;tbody&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;td&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;tfoot&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;th&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;thead&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;tr&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;button&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;datalist&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;fieldset&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;form&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;input&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;label&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;legend&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;meter&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;optgroup&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;option&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;output&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;progress&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;select&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;textarea&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;details&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;dialog&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;menu&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;menuitem&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;summary&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;content&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;element&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;shadow&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;slot&gt;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;template&gt;&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> blocks = [];</span><br><span class="line"><span class="keyword">const</span> inlines = [];</span><br><span class="line"><span class="keyword">const</span> others = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> tag <span class="keyword">of</span> tags) &#123;</span><br><span class="line">  <span class="keyword">let</span> elem = <span class="built_in">document</span>.createElement(tag.substring(<span class="number">1</span>, tag.length - <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>].appendChild(elem);</span><br><span class="line">  <span class="keyword">let</span> computedStyle = <span class="built_in">window</span>.getComputedStyle(elem);</span><br><span class="line">  <span class="keyword">if</span> (computedStyle.display === <span class="string">&#x27;block&#x27;</span>) &#123;</span><br><span class="line">    blocks.push(tag);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (computedStyle.display === <span class="string">&#x27;inline&#x27;</span>) &#123;</span><br><span class="line">    inlines.push(tag);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    others[tag] = computedStyle.display;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;块状元素&#x27;</span>, blocks);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;行内元素&#x27;</span>, inlines);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> keys = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> others) &#123;</span><br><span class="line">  <span class="keyword">if</span> (others.hasOwnProperty(k))</span><br><span class="line">    keys.push(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;其他元素&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> keys) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v, others[v])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="块状元素"><a href="#块状元素" class="headerlink" title="块状元素"></a>块状元素</h2><h3 id="根元素"><a href="#根元素" class="headerlink" title="根元素"></a>根元素</h3><p><code>&lt;html&gt;</code><br><code>&lt;body&gt;</code></p>
<h3 id="内容分区"><a href="#内容分区" class="headerlink" title="内容分区"></a>内容分区</h3><p><code>&lt;address&gt;</code><br><code>&lt;article&gt;</code><br><code>&lt;aside&gt;</code><br><code>&lt;footer&gt;</code><br><code>&lt;header&gt;</code><br><code>&lt;h1&gt;</code><br><code>&lt;h2&gt;</code><br><code>&lt;h3&gt;</code><br><code>&lt;h4&gt;</code><br><code>&lt;h5&gt;</code><br><code>&lt;h6&gt;</code><br><code>&lt;main&gt;</code><br><code>&lt;nav&gt;</code><br><code>&lt;section&gt;</code></p>
<h3 id="文本内容"><a href="#文本内容" class="headerlink" title="文本内容"></a>文本内容</h3><p><code>&lt;blockquote&gt;</code><br><code>&lt;dd&gt;</code><br><code>&lt;div&gt;</code><br><code>&lt;dl&gt;</code><br><code>&lt;dt&gt;</code><br><code>&lt;figcaption&gt;</code><br><code>&lt;figure&gt;</code><br><code>&lt;hr&gt;</code><br><code>&lt;ol&gt;</code><br><code>&lt;p&gt;</code><br><code>&lt;pre&gt;</code><br><code>&lt;ul&gt;</code></p>
<h3 id="其他块状元素"><a href="#其他块状元素" class="headerlink" title="其他块状元素"></a>其他块状元素</h3><p><code>&lt;details&gt;</code><br><code>&lt;fieldset&gt;</code><br><code>&lt;form&gt;</code><br><code>&lt;legend&gt;</code><br><code>&lt;menu&gt;</code><br><code>&lt;optgroup&gt;</code><br><code>&lt;option&gt;</code><br><code>&lt;summary&gt;</code></p>
<h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><h3 id="内联文本语义"><a href="#内联文本语义" class="headerlink" title="内联文本语义"></a>内联文本语义</h3><p><code>&lt;a&gt;</code><br><code>&lt;abbr&gt;</code><br><code>&lt;b&gt;</code><br><code>&lt;bdi&gt;</code><br><code>&lt;bdo&gt;</code><br><code>&lt;br&gt;</code><br><code>&lt;cite&gt;</code><br><code>&lt;code&gt;</code><br><code>&lt;data&gt;</code><br><code>&lt;dfn&gt;</code><br><code>&lt;em&gt;</code><br><code>&lt;i&gt;</code><br><code>&lt;kbd&gt;</code><br><code>&lt;mark&gt;</code><br><code>&lt;q&gt;</code><br><code>&lt;rb&gt;</code><br><code>&lt;rt&gt;</code><br><code>&lt;rtc&gt;</code><br><code>&lt;ruby&gt;</code><br><code>&lt;s&gt;</code><br><code>&lt;samp&gt;</code><br><code>&lt;small&gt;</code><br><code>&lt;span&gt;</code><br><code>&lt;strong&gt;</code><br><code>&lt;sub&gt;</code><br><code>&lt;sup&gt;</code><br><code>&lt;time&gt;</code><br><code>&lt;u&gt;</code><br><code>&lt;var&gt;</code><br><code>&lt;wbr&gt;</code></p>
<h3 id="图片和多媒体"><a href="#图片和多媒体" class="headerlink" title="图片和多媒体"></a>图片和多媒体</h3><p><code>&lt;area&gt;</code><br><code>&lt;img&gt;</code><br><code>&lt;map&gt;</code><br><code>&lt;track&gt;</code><br><code>&lt;video&gt;</code></p>
<h3 id="内嵌内容"><a href="#内嵌内容" class="headerlink" title="内嵌内容"></a>内嵌内容</h3><p><code>&lt;embed&gt;</code><br><code>&lt;iframe&gt;</code><br><code>&lt;noembed&gt;</code><br><code>&lt;object&gt;</code><br><code>&lt;picture&gt;</code><br><code>&lt;source&gt;</code></p>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p><code>&lt;canvas&gt;</code><br><code>&lt;noscript&gt;</code></p>
<h3 id="编辑标识"><a href="#编辑标识" class="headerlink" title="编辑标识"></a>编辑标识</h3><p><code>&lt;del&gt;</code><br><code>&lt;ins&gt;</code></p>
<h3 id="其他内联元素"><a href="#其他内联元素" class="headerlink" title="其他内联元素"></a>其他内联元素</h3><p><code>&lt;base&gt;</code><br><code>&lt;content&gt;</code><br><code>&lt;element&gt;</code><br><code>&lt;label&gt;</code><br><code>&lt;menuitem&gt;</code><br><code>&lt;output&gt;</code><br><code>&lt;shadow&gt;</code></p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">其他元素 (30)</span><br><span class="line">&lt;head&gt; none</span><br><span class="line">&lt;link&gt; none</span><br><span class="line">&lt;meta&gt; none</span><br><span class="line">&lt;style&gt; none</span><br><span class="line">&lt;title&gt; none</span><br><span class="line">&lt;li&gt; list-item</span><br><span class="line">&lt;rp&gt; none</span><br><span class="line">&lt;audio&gt; none</span><br><span class="line">&lt;param&gt; none</span><br><span class="line">&lt;script&gt; none</span><br><span class="line">&lt;caption&gt; table-caption</span><br><span class="line">&lt;col&gt; table-column</span><br><span class="line">&lt;colgroup&gt; table-column-group</span><br><span class="line">&lt;table&gt; table</span><br><span class="line">&lt;tbody&gt; table-row-group</span><br><span class="line">&lt;td&gt; table-cell</span><br><span class="line">&lt;tfoot&gt; table-footer-group</span><br><span class="line">&lt;th&gt; table-cell</span><br><span class="line">&lt;thead&gt; table-header-group</span><br><span class="line">&lt;tr&gt; table-row</span><br><span class="line">&lt;button&gt; inline-block</span><br><span class="line">&lt;datalist&gt; none</span><br><span class="line">&lt;input&gt; inline-block</span><br><span class="line">&lt;meter&gt; inline-block</span><br><span class="line">&lt;progress&gt; inline-block</span><br><span class="line">&lt;select&gt; inline-block</span><br><span class="line">&lt;textarea&gt; inline-block</span><br><span class="line">&lt;dialog&gt; none</span><br><span class="line">&lt;slot&gt; contents</span><br><span class="line">&lt;template&gt; none</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML 常用标签列表</title>
    <url>/blogs/2018/02/01/html-%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<hr>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><table>
<thead>
<tr>
<th>标签</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;!DOCTYPE&gt;</td>
<td align="left">定义文档类型</td>
</tr>
<tr>
<td>&lt;html&gt;</td>
<td align="left">定义 HTML 文档</td>
</tr>
<tr>
<td>&lt;title&gt;</td>
<td align="left">定义文档的标题</td>
</tr>
<tr>
<td>&lt;body&gt;</td>
<td align="left">定义文档的主体</td>
</tr>
<tr>
<td>&lt;h1&gt; to &lt;h6&gt;</td>
<td align="left">定义 HTML 标题</td>
</tr>
<tr>
<td>&lt;p&gt;</td>
<td align="left">定义段落</td>
</tr>
<tr>
<td>&lt;br&gt;</td>
<td align="left">定义简单的折行</td>
</tr>
<tr>
<td>&lt;hr&gt;</td>
<td align="left">定义水平线</td>
</tr>
<tr>
<td>&lt;!–…–&gt;</td>
<td align="left">定义注释</td>
</tr>
</tbody></table>
<span id="more"></span>

<hr>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;abbr&gt;</td>
<td>定义缩写</td>
</tr>
<tr>
<td>&lt;address&gt;</td>
<td>定义文档作者或拥有者的联系信息</td>
</tr>
<tr>
<td>&lt;b&gt;</td>
<td>定义粗体文本</td>
</tr>
<tr>
<td>&lt;big&gt;</td>
<td>定义大号文本</td>
</tr>
<tr>
<td>&lt;blockquote&gt;</td>
<td>定义长的引用</td>
</tr>
<tr>
<td>&lt;code&gt;</td>
<td>定义计算机代码文本</td>
</tr>
<tr>
<td>&lt;del&gt;</td>
<td>定义被删除文本</td>
</tr>
<tr>
<td>&lt;em&gt;</td>
<td>定义强调文本</td>
</tr>
<tr>
<td>&lt;i&gt;</td>
<td>定义斜体文本</td>
</tr>
<tr>
<td>&lt;ins&gt;</td>
<td>定义被插入文本</td>
</tr>
<tr>
<td>&lt;mark&gt;</td>
<td>定义有记号的文本【HTML5】</td>
</tr>
<tr>
<td>&lt;pre&gt;</td>
<td>定义预格式文本</td>
</tr>
<tr>
<td>&lt;progress&gt;</td>
<td>定义任何类型的任务的进度【HTML5】</td>
</tr>
<tr>
<td>&lt;q&gt;</td>
<td>定义短的引用</td>
</tr>
<tr>
<td>&lt;small&gt;</td>
<td>定义小号文本</td>
</tr>
<tr>
<td>&lt;strong&gt;</td>
<td>定义语气更为强烈的强调文本</td>
</tr>
<tr>
<td>&lt;sup&gt;</td>
<td>定义上标文本</td>
</tr>
<tr>
<td>&lt;sub&gt;</td>
<td>定义下标文本</td>
</tr>
<tr>
<td>&lt;time&gt;</td>
<td>定义日期/时间【HTML5】</td>
</tr>
<tr>
<td>&lt;tt&gt;</td>
<td>呈现类似打字机或者等宽的文本效果</td>
</tr>
</tbody></table>
<hr>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;form&gt;</td>
<td>定义供用户输入的 HTML 表单</td>
</tr>
<tr>
<td>&lt;input&gt;</td>
<td>定义输入控件</td>
</tr>
<tr>
<td>&lt;textarea&gt;</td>
<td>定义多行的文本输入控件</td>
</tr>
<tr>
<td>&lt;button&gt;</td>
<td>定义按钮</td>
</tr>
<tr>
<td>&lt;select&gt;</td>
<td>定义选择列表（下拉列表）</td>
</tr>
<tr>
<td>&lt;option&gt;</td>
<td>定义选择列表中的选项</td>
</tr>
<tr>
<td>&lt;label&gt;</td>
<td>定义 input 元素的标注</td>
</tr>
<tr>
<td>&lt;fieldset&gt;</td>
<td>定义围绕表单中元素的边框</td>
</tr>
<tr>
<td>&lt;legend&gt;</td>
<td>定义 fieldset 元素的标题</td>
</tr>
<tr>
<td>&lt;datalist&gt;</td>
<td>定义下拉列表【HTML5】</td>
</tr>
</tbody></table>
<hr>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;frame&gt;</td>
<td>定义框架集的窗口或框架</td>
</tr>
<tr>
<td>&lt;frameset&gt;</td>
<td>定义框架集</td>
</tr>
</tbody></table>
<hr>
<h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;img&gt;</td>
<td>定义图像</td>
</tr>
<tr>
<td>&lt;map&gt;</td>
<td>定义图像映射</td>
</tr>
<tr>
<td>&lt;area&gt;</td>
<td>定义图像地图内部的区域</td>
</tr>
</tbody></table>
<hr>
<h2 id="音频-视频"><a href="#音频-视频" class="headerlink" title="音频/视频"></a>音频/视频</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;audio&gt;</td>
<td>定义声音内容【HTML5】</td>
</tr>
<tr>
<td>&lt;source&gt;</td>
<td>定义媒介源【HTML5】</td>
</tr>
<tr>
<td>&lt;video&gt;</td>
<td>定义视频【HTML5】</td>
</tr>
</tbody></table>
<hr>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;a&gt;</td>
<td>定义锚</td>
</tr>
<tr>
<td>&lt;link&gt;</td>
<td>定义文档与外部资源的关系</td>
</tr>
<tr>
<td>&lt;nav&gt;</td>
<td>定义导航链接【HTML5】</td>
</tr>
</tbody></table>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;ul&gt;</td>
<td>定义无序列表</td>
</tr>
<tr>
<td>&lt;ol&gt;</td>
<td>定义有序列表</td>
</tr>
<tr>
<td>&lt;li&gt;</td>
<td>定义列表的项目</td>
</tr>
<tr>
<td>&lt;dl&gt;</td>
<td>定义定义列表</td>
</tr>
<tr>
<td>&lt;dt&gt;</td>
<td>定义定义列表中的项目</td>
</tr>
<tr>
<td>&lt;dd&gt;</td>
<td>定义定义列表中项目的描述</td>
</tr>
</tbody></table>
<hr>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;table&gt;</td>
<td>定义表格</td>
</tr>
<tr>
<td>&lt;caption&gt;</td>
<td>定义表格标题</td>
</tr>
<tr>
<td>&lt;th&gt;</td>
<td>定义表格中的表头单元格</td>
</tr>
<tr>
<td>&lt;tr&gt;</td>
<td>定义表格中的行</td>
</tr>
<tr>
<td>&lt;td&gt;</td>
<td>定义表格中的单元</td>
</tr>
<tr>
<td>&lt;thead&gt;</td>
<td>定义表格中的表头内容</td>
</tr>
<tr>
<td>&lt;tbody&gt;</td>
<td>定义表格中的主体内容</td>
</tr>
<tr>
<td>&lt;tfoot&gt;</td>
<td>定义表格中的表注内容（脚注）</td>
</tr>
<tr>
<td>&lt;col&gt;</td>
<td>定义表格中一个或多个列的属性值</td>
</tr>
<tr>
<td>&lt;colgroup&gt;</td>
<td>定义表格中供格式化的列组</td>
</tr>
</tbody></table>
<hr>
<h2 id="样式-节"><a href="#样式-节" class="headerlink" title="样式/节"></a>样式/节</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;style&gt;</td>
<td>定义文档的样式信息</td>
</tr>
<tr>
<td>&lt;div&gt;</td>
<td>定义文档中的节</td>
</tr>
<tr>
<td>&lt;span&gt;</td>
<td>定义文档中的节</td>
</tr>
<tr>
<td>&lt;header&gt;</td>
<td>定义 section 或 page 的页眉【HTML5】</td>
</tr>
<tr>
<td>&lt;footer&gt;</td>
<td>定义 section 或 page 的页脚【HTML5】</td>
</tr>
<tr>
<td>&lt;section&gt;</td>
<td>定义 section【HTML5】</td>
</tr>
<tr>
<td>&lt;article&gt;</td>
<td>定义文章【HTML5】</td>
</tr>
<tr>
<td>&lt;aside&gt;</td>
<td>定义页面内容之外的内容【HTML5】</td>
</tr>
<tr>
<td>&lt;details&gt;</td>
<td>定义元素的细节【HTML5】</td>
</tr>
<tr>
<td>&lt;dialog&gt;</td>
<td>定义对话框或窗口【HTML5】</td>
</tr>
<tr>
<td>&lt;summary&gt;</td>
<td>为 &lt;details&gt; 元素定义可见的标题【HTML5】</td>
</tr>
</tbody></table>
<hr>
<h2 id="元信息"><a href="#元信息" class="headerlink" title="元信息"></a>元信息</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;head&gt;</td>
<td>定义关于文档的信息</td>
</tr>
<tr>
<td>&lt;meta&gt;</td>
<td>定义关于 HTML 文档的元信息</td>
</tr>
<tr>
<td>&lt;base&gt;</td>
<td>定义页面中所有链接的默认地址或默认目标</td>
</tr>
</tbody></table>
<hr>
<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;script&gt;</td>
<td>定义客户端脚本</td>
</tr>
<tr>
<td>&lt;noscript&gt;</td>
<td>定义针对不支持客户端脚本的用户的替代内容</td>
</tr>
<tr>
<td>&lt;embed&gt;</td>
<td>为外部应用程序（非 HTML）定义容器【HTML5】</td>
</tr>
<tr>
<td>&lt;object&gt;</td>
<td>定义嵌入的对象</td>
</tr>
<tr>
<td>&lt;param&gt;</td>
<td>定义对象的参数</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 实用库</title>
    <url>/blogs/2019/01/20/javascript-%E5%AE%9E%E7%94%A8%E5%BA%93/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://github.com/getify/LABjs">LABjs</a></p>
<p>  Loading And Blocking JavaScript: On-demand parallel loader for JavaScript with execution order dependencies.</p>
</li>
<li><p><a href="https://code.google.com/archive/p/css3-mediaqueries-js/">css3-mediaqueries-js</a></p>
<p>  Make CSS3 Media Queries work in all browsers (JavaScript library)</p>
</li>
<li><p><a href="https://github.com/scottjehl/Respond">Respond.js</a></p>
<p>  A fast &amp; lightweight polyfill for min/max-width CSS3 Media Queries (for IE 6-8, and more)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 对象及高级技巧</title>
    <url>/blogs/2018/09/05/javascript-%E5%AF%B9%E8%B1%A1%E5%8F%8A%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h2><p>ECMAScript 中有两种属性：数据属性和访问器属性。</p>
<h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><p>数据属性包含一个数据值的位置。在这个位置可以读取和写入值。数据属性有 4 个描述其行为的特性。</p>
<ul>
<li><p>[[Configurable]]</p>
<p>  表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认值为 true。</p>
</li>
<li><p>[[Enumerable]]</p>
<p>  表示能否通过 for-in 循环返回属性。默认值为 true。</p>
</li>
<li><p>[[Writable]]</p>
<p>  表示能否修改属性的值。默认值为 true。</p>
</li>
<li><p>[[Value]]</p>
<p>  包含这个属性的数据值。读取属性的时候，从这个位置读取；写入属性值的时候，把这个新值保存在这个位置。默认值为 undefined。</p>
</li>
</ul>
<p>要修改属性的默认特性，需要使用 ECMAScript 5 的 <code>Object.defineProperty()</code> 方法。</p>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;Carter&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// Carter</span></span><br><span class="line">person.name = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// Carter</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li><p>把 configurable 设置为 false 后，就不能再设置为 true 了。即一旦把属性定义为不可配置的，就不能再把它变回可配置的了。此时再调用 <code>Object.defineProperty()</code> 方法修改除 writable 之外的特性，都会导致错误。</p>
</li>
<li><p>在调用 <code>Object.defineProperty()</code> 方法创建一个新属性时，如果不指定，configurable、enumerable 和 writable 特性的默认值都是 false。如果调用 <code>Object.defineProperty()</code> 方法只是修改已经定义的属性的特性，则无此限制。</p>
</li>
</ul>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;Carter&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抛出错误</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><p>访问器属性不包含数据值，它们包含一堆 getter 函数和 setter 函数。</p>
<ul>
<li><p>[[Configurable]]</p>
<p>  表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认值为 true。</p>
</li>
<li><p>[[Enumerable]]</p>
<p>  表示能否通过 for-in 循环返回属性。默认值为 true。</p>
</li>
<li><p>[[Get]]</p>
<p>  在读取属性是调用的函数。默认值为 undefined。</p>
</li>
<li><p>[[Set]]</p>
<p>  在写入属性是调用的函数。默认值为 undefined。</p>
</li>
</ul>
<p>访问器属性依然不能直接定义，必须使用 <code>Object.defineProperty()</code> 来定义。</p>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">    <span class="attr">_year</span>: <span class="number">2004</span>,</span><br><span class="line">    <span class="attr">edition</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">&quot;year&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._year;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>._year = newValue;</span><br><span class="line">            <span class="built_in">this</span>.edition += newValue - <span class="number">2004</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.edition); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性"></a>定义多个属性</h3><p>ECMAScript 5 又定义了一个 <code>Object.defineProperties()</code> 方法。利用这个方法可以通过描述符一次定义多个属性。</p>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</span><br><span class="line">    <span class="attr">_year</span>: &#123;</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="number">2004</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">edition</span>: &#123;</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">year</span>: &#123;</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._year;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>._year = newValue;</span><br><span class="line">                <span class="built_in">this</span>.edition += newValue - <span class="number">2004</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="读取属性的特性"><a href="#读取属性的特性" class="headerlink" title="读取属性的特性"></a>读取属性的特性</h3><p>使用 ECMAScript 5 提供的 <code>Object.getOwnPropertyDescriptor()</code> 方法，可以取得给定属性的描述符。</p>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</span><br><span class="line">    <span class="attr">_year</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">2004</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">edition</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">year</span>: &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._year;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>._year = newValue;</span><br><span class="line">                <span class="built_in">this</span>.edition += newValue - <span class="number">2004</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">&quot;_year&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor.configurable); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.enumerable); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.writable); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.value); <span class="comment">// 2004</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> descriptor.get); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> descriptor.set); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">&quot;year&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor.configurable); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.enumerable); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.writable); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.value); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> descriptor.get); <span class="comment">// &quot;function&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> descriptor.set); <span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="防篡改对象（ECMAScript-5）"><a href="#防篡改对象（ECMAScript-5）" class="headerlink" title="防篡改对象（ECMAScript 5）"></a>防篡改对象（ECMAScript 5）</h2><h3 id="不可拓展对象"><a href="#不可拓展对象" class="headerlink" title="不可拓展对象"></a>不可拓展对象</h3><ul>
<li><p>Object.preventExtensions(obj)</p>
<p>  禁止给对象添加属性或方法</p>
</li>
<li><p>Object.isExtensible(obj)</p>
<p>  判断对象是否可以拓展</p>
</li>
</ul>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(person);</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(person); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="密封的对象"><a href="#密封的对象" class="headerlink" title="密封的对象"></a>密封的对象</h3><ul>
<li><p>Object.seal(obj)</p>
<p>  使对象不可拓展，且不能删除对象中的属性和方法</p>
</li>
<li><p>Object.isSealed(obj)</p>
<p>  判断对象是否被密封</p>
</li>
</ul>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.isSealed(person); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.seal(person);</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(person); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.isSealed(person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="冻结的对象"><a href="#冻结的对象" class="headerlink" title="冻结的对象"></a>冻结的对象</h3><ul>
<li><p>Object.freeze(obj)</p>
<p>  使对象不可拓展，又是密封的，且如果没有定义[[Set]]函数，对象中属性是不可写的</p>
</li>
<li><p>Object.isFrozen(obj)</p>
<p>  判断对象是否被冻结</p>
</li>
</ul>
<p>示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.isSealed(person); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(person); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(person);</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(person); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.isSealed(person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"></span><br><span class="line">person.name = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 的类型判断</title>
    <url>/blogs/2018/12/10/javascript-%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>使用 JavaScript 自带的 <code>typeof</code> 操作符获取变量的类型。</p>
<p>可能的得到的字符串有：</p>
<table>
<thead>
<tr>
<th>字符串</th>
</tr>
</thead>
<tbody><tr>
<td>undefined</td>
</tr>
<tr>
<td>boolean</td>
</tr>
<tr>
<td>number</td>
</tr>
<tr>
<td>string</td>
</tr>
<tr>
<td>symbol</td>
</tr>
<tr>
<td>function</td>
</tr>
<tr>
<td>object</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getType(<span class="literal">undefined</span>) <span class="comment">// undefined</span></span><br><span class="line">getType(<span class="literal">true</span>) <span class="comment">// boolean</span></span><br><span class="line">getType(<span class="number">12</span>) <span class="comment">// number</span></span><br><span class="line">getType(<span class="string">&#x27;string&#x27;</span>) <span class="comment">// string</span></span><br><span class="line">getType(<span class="built_in">Symbol</span>()) <span class="comment">// symbol</span></span><br><span class="line">getType(<span class="literal">null</span>) <span class="comment">// object</span></span><br><span class="line">getType(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;) <span class="comment">// function</span></span><br><span class="line">getType(<span class="function">() =&gt;</span> &#123;&#125;) <span class="comment">// function</span></span><br><span class="line">getType(&#123;&#125;) <span class="comment">// object</span></span><br><span class="line">getType([]) <span class="comment">// object</span></span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：<code>Symbol</code> 是 ES6 添加的基本数据类型。</p>
<h2 id="Object-prototype-toString-call-xx"><a href="#Object-prototype-toString-call-xx" class="headerlink" title="Object.prototype.toString.call(xx)"></a>Object.prototype.toString.call(xx)</h2><p>通过 <code>Object.prototype.toString.call(xx)</code>，获得类似 <code>[object Type]</code> 的字符串，可以获得正确的类型。</p>
<p>方法可能返回的字符串包括但不仅限于：</p>
<table>
<thead>
<tr>
<th>字符串</th>
</tr>
</thead>
<tbody><tr>
<td>[object Undefined]</td>
</tr>
<tr>
<td>[object Boolean]</td>
</tr>
<tr>
<td>[object Number]</td>
</tr>
<tr>
<td>[object String]</td>
</tr>
<tr>
<td>[object Array]</td>
</tr>
<tr>
<td>[object Symbol]</td>
</tr>
<tr>
<td>[object Function]</td>
</tr>
<tr>
<td>[object Object]</td>
</tr>
<tr>
<td>[object Null]</td>
</tr>
</tbody></table>
<p>定义 <code>getType</code> 方法获取变量的类型，返回字符串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> s = <span class="built_in">Object</span>.prototype.toString.call(arg);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="regexp">/(?&lt;=\s+)\S+(?=])/gi</span>.exec(s);</span><br><span class="line">  <span class="comment">// let result = s.match(/(?&lt;=\s+)\S+(?=])/gi)</span></span><br><span class="line">  <span class="keyword">return</span> result[<span class="number">0</span>].toLowerCase()</span><br><span class="line">  <span class="comment">// return return s.slice(s.lastIndexOf(&#x27; &#x27;), s.indexOf(&#x27;]&#x27;)).toLowerCase()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getType(<span class="literal">undefined</span>) <span class="comment">// undefined</span></span><br><span class="line">getType(<span class="literal">true</span>) <span class="comment">// boolean</span></span><br><span class="line">getType(<span class="number">12</span>) <span class="comment">// number</span></span><br><span class="line">getType(<span class="string">&#x27;string&#x27;</span>) <span class="comment">// string</span></span><br><span class="line">getType(<span class="built_in">Symbol</span>()) <span class="comment">// symbol</span></span><br><span class="line">getType(<span class="literal">null</span>) <span class="comment">// null</span></span><br><span class="line">getType(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;) <span class="comment">// function</span></span><br><span class="line">getType(<span class="function">() =&gt;</span> &#123;&#125;) <span class="comment">// function</span></span><br><span class="line">getType(&#123;&#125;) <span class="comment">// object</span></span><br><span class="line">getType([]) <span class="comment">// array</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>background-attachment</title>
    <url>/blogs/2018/12/14/background-attachment/</url>
    <content><![CDATA[<p>CSS 属性 <code>background-attachment</code> 设置背景图片的位置是固定在视口（viewport）内，还是随包含它的块（block）滚动。</p>
<p>语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span>: fixed | scroll | local;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>fixed</td>
<td>背景相对于视口固定（viewport），背景不会随着页面的其他内容滚动而滚动</td>
</tr>
<tr>
<td>scroll</td>
<td>背景随着包含它的元素的祖先元素滚动而滚动。但是当包含它的元素滚动时（<code>overflow: scroll</code>），背景不滚动</td>
</tr>
<tr>
<td>local</td>
<td>背景与包含它的元素绑定，随着元素滚动而滚动</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 常用命令</title>
    <url>/blogs/2019/02/21/npm-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><p>查找帮助</p>
<ul>
<li><code>npm -l</code><br>  显示所有可用命令</li>
<li><code>npm &lt;command&gt; -h</code><br>  查看 <code>&lt;command&gt;</code> 命令的简单使用帮助</li>
<li><code>npm help &lt;command&gt;</code><br>  查看 <code>&lt;command&gt;</code> 命令的详细使用指南</li>
</ul>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>创建项目</p>
<ul>
<li><code>npm init</code><br>  在命令行所在的文件夹初始化一个项目（创建 <code>package.json</code> 文件）</li>
</ul>
</li>
<li><p>安装模块</p>
<ul>
<li><p><code>npm install package-name</code><br>  局部安装模块，安装在命令行所在的文件夹；并将模块依赖写入到 <code>package.json</code> 文件的 <code>dependencies</code> 中（生产环境）<br>  简写：<code>npm i package-name</code></p>
</li>
<li><p><code>npm install --save-prod package-name</code><br>  局部安装时将模块依赖写入到 <code>package.json</code> 文件的 <code>dependencies</code> 中（生产环境）<br>  简写：<code>npm install -P package-name</code></p>
</li>
<li><p><code>npm install --save-dev package-name</code><br>  局部安装时将模块依赖写入到 <code>package.json</code> 文件的 <code>devDependencies</code> 中（开发环境）<br>  简写：<code>npm install -D package-name</code></p>
</li>
<li><p><code>npm install -g package-name</code><br>  全局安装模块</p>
</li>
</ul>
</li>
<li><p>卸载模块</p>
<ul>
<li><code>npm uninstall package-name</code><br>  卸载局部模块</li>
<li><code>npm uninstall -g package-name</code><br>  卸载全局模块</li>
</ul>
</li>
<li><p>更新模块</p>
<ul>
<li><code>npm update package-name</code><br>  更新局部模块</li>
<li><code>npm update -g package-name</code><br>  更新全局模块</li>
<li><code>npm install -g package-name@x.x.x</code><br>  更新全局模块 <code>package-name</code> 到 <code>x.x.x</code> 版本</li>
</ul>
</li>
<li><p>查看某个模块的全部版本</p>
<ul>
<li><code>npm view package-name versions</code></li>
</ul>
</li>
</ul>
<h2 id="国内优秀-npm-镜像"><a href="#国内优秀-npm-镜像" class="headerlink" title="国内优秀 npm 镜像"></a>国内优秀 npm 镜像</h2><h3 id="淘宝-npm-镜像"><a href="#淘宝-npm-镜像" class="headerlink" title="淘宝 npm 镜像"></a>淘宝 npm 镜像</h3><ul>
<li>搜索地址：<a href="https://npm.taobao.org/">https://npm.taobao.org/</a></li>
<li>registry 地址：<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></li>
</ul>
<h3 id="cnpmjs-镜像"><a href="#cnpmjs-镜像" class="headerlink" title="cnpmjs 镜像"></a>cnpmjs 镜像</h3><ul>
<li>搜索地址：<a href="https://cnpmjs.org/">https://cnpmjs.org/</a></li>
<li>registry 地址：<a href="https://r.cnpmjs.org/">https://r.cnpmjs.org/</a></li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install package-name --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="长期使用"><a href="#长期使用" class="headerlink" title="长期使用"></a>长期使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="使用-cnpm"><a href="#使用-cnpm" class="headerlink" title="使用 cnpm"></a>使用 cnpm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>使用 <code>cnpm</code> 命令代替 <code>npm</code> 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install package-name</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>实现 JavaScript 的 bind，apply，call 方法</title>
    <url>/blogs/2019/02/21/%E5%AE%9E%E7%8E%B0-javascript-%E7%9A%84-bind%EF%BC%8Capply%EF%BC%8Ccall-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="实现-Function-prototype-bind-方法"><a href="#实现-Function-prototype-bind-方法" class="headerlink" title="实现 Function.prototype.bind 方法"></a>实现 Function.prototype.bind 方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span> (<span class="params">fn, obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    args.push(<span class="built_in">arguments</span>[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">      args.push(<span class="built_in">arguments</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// apply 方法的实现在下文</span></span><br><span class="line">    <span class="keyword">return</span> apply(fn, obj, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="实现-Function-prototype-apply-方法"><a href="#实现-Function-prototype-apply-方法" class="headerlink" title="实现 Function.prototype.apply 方法"></a>实现 Function.prototype.apply 方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">apply</span> (<span class="params">fn, obj, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tmpFn = <span class="built_in">String</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, tmpFn, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: fn</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">var</span> statement = <span class="string">&#x27;obj[tmpFn](&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">    statement += <span class="string">&#x27;args[&#x27;</span> + i + <span class="string">&#x27;], &#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    statement = statement.slice(<span class="number">0</span>, -<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  statement += <span class="string">&#x27;)&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(statement)</span><br><span class="line">  <span class="keyword">delete</span> obj[tmpFn]</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-Function-prototype-call-方法"><a href="#实现-Function-prototype-call-方法" class="headerlink" title="实现 Function.prototype.call 方法"></a>实现 Function.prototype.call 方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span> (<span class="params">fn, obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    args.push(<span class="built_in">arguments</span>[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 直接调用上面实现的 apply 方法</span></span><br><span class="line">  <span class="keyword">return</span> apply(fn, obj, args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么学习前端开发</title>
    <url>/blogs/2018/03/12/%E6%80%8E%E4%B9%88%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="怎么学习前端开发？求推荐学习路线？-知乎"><a href="#怎么学习前端开发？求推荐学习路线？-知乎" class="headerlink" title="怎么学习前端开发？求推荐学习路线？ - 知乎"></a><a href="https://www.zhihu.com/question/30180100/answer/156399333">怎么学习前端开发？求推荐学习路线？ - 知乎</a></h2><h2 id="如何学习编程？-知乎"><a href="#如何学习编程？-知乎" class="headerlink" title="如何学习编程？ - 知乎"></a><a href="https://www.zhihu.com/question/19578287/answer/157148072">如何学习编程？ - 知乎</a></h2><h2 id="零基础开始学-Web-前端开发，有什么建议吗？-知乎"><a href="#零基础开始学-Web-前端开发，有什么建议吗？-知乎" class="headerlink" title="零基础开始学 Web 前端开发，有什么建议吗？ - 知乎"></a><a href="https://www.zhihu.com/question/19637373/answer/162940674">零基础开始学 Web 前端开发，有什么建议吗？ - 知乎</a></h2><h2 id="程序员学哪种语言最好？-知乎"><a href="#程序员学哪种语言最好？-知乎" class="headerlink" title="程序员学哪种语言最好？ - 知乎"></a><a href="https://www.zhihu.com/question/23016465/answer/169041683">程序员学哪种语言最好？ - 知乎</a></h2><h2 id="学习的终极目标是什么？-知乎"><a href="#学习的终极目标是什么？-知乎" class="headerlink" title="学习的终极目标是什么？ - 知乎"></a><a href="https://zhuanlan.zhihu.com/p/26894535">学习的终极目标是什么？ - 知乎</a></h2><span id="more"></span>]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>时间标准</title>
    <url>/blogs/2019/02/22/%E6%97%B6%E9%97%B4%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<h2 id="世界时（Universal-Time）"><a href="#世界时（Universal-Time）" class="headerlink" title="世界时（Universal Time）"></a>世界时（Universal Time）</h2><p>世界时（Universal Time，简称 UT）是一种以格林尼治子夜起算的<a href="#%E5%B9%B3%E5%A4%AA%E9%98%B3%E6%97%B6">平太阳时</a>。世界时是以地球自转为基准得到的时间尺度，其精度受到地球自转不均匀变化和极移的影响，为了解决这种影响，1955年国际天文联合会定义了 UT0、UT1 和 UT2 三个系统：</p>
<ul>
<li><p>UT0 系统是由一个天文台的天文观测直接测定的世界时，没有考虑极移造成的天文台地理坐标变化。该系统曾长期被认为是稳定均匀的时间计量系统，得到过广泛应用。</p>
</li>
<li><p>UT1 系统是在 UT0 的基础上加入了极移改正 Δλ，修正地轴摆动的影响。UT1 是目前使用的世界时标准。被作为目前世界民用时间标准 UTC 在增减闰秒时的参照标准。</p>
</li>
<li><p>UT2 系统是 UT1 的平滑处理版本，在 UT1 基础上加入了地球自转速率的季节性改正 ΔT。</p>
</li>
</ul>
<p>它们之间的关系可以表示为：</p>
<ul>
<li>UT1 = UT0 + Δλ</li>
<li>UT2 = UT1 + ΔT</li>
</ul>
<span id="more"></span>

<h2 id="平太阳时"><a href="#平太阳时" class="headerlink" title="平太阳时"></a>平太阳时</h2><p>太阳日（solar day）是依据太阳运动，所定义的时间，可以分为<a href="#%E8%A7%86%E5%A4%AA%E9%98%B3%E6%97%A5">视太阳日</a>和<a href="#%E5%B9%B3%E5%A4%AA%E9%98%B3%E6%97%A5">平太阳日</a>。</p>
<p>一太阳日传统称为一“日”、一“天”或一“昼夜”。</p>
<h3 id="视太阳日"><a href="#视太阳日" class="headerlink" title="视太阳日"></a>视太阳日</h3><p>视太阳日（apparent solar day）是依据<a href="#%E7%9C%9F%E5%A4%AA%E9%98%B3">真太阳</a>定义的，也就是真实的太阳连续两次经过某地相同之中天，即是上至上中天或下至下中天的时间间隔，可以使用日晷来测量（上中天）。</p>
<p>由于以下两个原因，视太阳日在一年当中的长度会每天不停地改变。</p>
<p>首先，地球的轨道是一个椭圆而不是正圆，所以当地球接近太阳时速度会加快，到达近日点时的运动速度最快；远离时又会减慢，到达远日点时的速度最慢（参考开普勒行星运动定律）。<br>其次，因为地球自转轴的倾斜角度，使得太阳在黄道上运行的大圆对地球的天球赤道是倾斜的，当太阳在两个分点时，穿越赤道时会有一个角度的，所以投影在赤道上的运行速度小于平均速度；当太阳在至点时，他的运动方向是平行于赤道的，所以投影的运行速度高于平均的速度（参考回归年）。因此，视太阳日在3月（26-27日）和9月（12-13日）是比在6月（18-19日）或12月（20-21日）短的。这些日期的长短变化是在分点、至点、远日点、和近日点之间逐渐变化的。</p>
<h3 id="平太阳日"><a href="#平太阳日" class="headerlink" title="平太阳日"></a>平太阳日</h3><p>平太阳日（mean solar day）是以平太阳为参考点，以平太阳连续两次经过某地之下中天的时间间隔，需花24小时来转360°59’。更明确的说，平太阳日是经由观察太阳相对于恒星的周日运动，所获得的平均太阳时，经由人为的调整而显示在时钟上的时间。</p>
<p>平太阳日的长度是固定的24小时，在一年之中不会因为昼夜长短的变化而改变。视太阳日的长度会与平太阳日（86,400秒）不同，相邻的每一天最多可以短22秒或长29秒。因为这种延长或缩短会持续进行一段时间，所以最多会比平太阳日提早17分钟或延迟14分钟。因为这些期间是周期性的，平太阳时和视太阳时的差值就是均时差。</p>
<p>在历史上有许多方法被用来模拟（显示）平太阳时，最早是使用漏壶或水钟，差不多从前4000年到前2000年中期。在纪元前一千年中叶之前，水钟只能依据视太阳日来调整，因此除了能在夜晚继续使用外，它的准确度并不会比依靠太阳投影的日晷好。</p>
<p>不过，太阳相对于恒星始终是在黄道上向东移动，因此从纪元前一千年中期，相对于恒星的周日运动可以用来测量平太阳日，来比较以确定时钟的误差率。巴比伦的天文学家已经知道均时差和如何利用相对于恒星的自转速率，恒星时，来改正，以获得比水钟更为准确的时间。这种理想的恒星时日后也应用在行星、月球和太阳运动的描述。</p>
<p>在20世纪初期，机械时钟的准确度还没有比地球自转所显示的恒星时钟来得准确，即使到了今天，原子钟的精度已经比地球的自转更为稳定，恒星时钟仍然被用来校准平太阳日。在20世纪末期，地球自转的速率被改以外星系的无线电源来定义，并且平太阳时也被转换成外来的无线电源的比率。平太阳时与协调世界时之间的差异，就成为是否需要做闰秒调整的依据。</p>
<h3 id="太阳日的其他含意"><a href="#太阳日的其他含意" class="headerlink" title="太阳日的其他含意"></a>太阳日的其他含意</h3><p>太阳日是星期日的前身。自古罗马开始定为休息日，人民不需工作而从事崇拜活动。</p>
<h2 id="真太阳"><a href="#真太阳" class="headerlink" title="真太阳"></a>真太阳</h2><p>真太阳或视太阳是地球上的观察者（或任一行星的观察者）所看见的太阳。术语“真太阳”是用来对比“平太阳”（它指太阳的平均位置），以对应术语“真太阳时”和“平太阳时”。</p>
<p>真太阳日是以太阳为参照的地球的自转周期。由于地球公转的原因，真太阳日并不等于地球自转的恒星周期（恒星日），而是比恒星日约长3分56秒。又由于地球公转轨道是椭圆形的，根据开普勒定律，在近日点的公转速度快于在远日点的公转速度，因此一年之内不同时间的运动并不匀速，所以每个真太阳日的长短也不相等。</p>
<h2 id="协调世界时"><a href="#协调世界时" class="headerlink" title="协调世界时"></a>协调世界时</h2><p>协调世界时（英语：Coordinated Universal Time，法语：Temps Universel Coordonné，简称UTC）是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林尼治标准时间。中华民国采用CNS 7648的《资料元及交换格式–资讯交换–日期及时间的表示法》（与ISO 8601类似）称之为世界协调时间。中华人民共和国采用ISO 8601:2000的国家标准GB/T 7408-2005《数据元和交换格式 信息交换 日期和时间表示法》中亦称之为协调世界时。</p>
<p>协调世界时是世界上调节时钟和时间的主要时间标准，它与0度经线的平太阳时相差不超过1秒，并不遵守夏令时。协调世界时是最接近格林威治标准时间（GMT）的几个替代时间系统之一。对于大多数用途来说，UTC时间被认为能与GMT时间互换，但GMT时间已不再被科学界所确定。</p>
<p>协调世界时（UTC）正式形成于1960年国际无线电咨询委员会的374号建议中，该建议由多国时间实验室共同提出。人们对该时间系统进行过数次调整，直到1972年引入了闰秒机制，调整工作得以简化。也有很多人提议用一个没有闰秒的时间系统来替换掉协调世界时，但目前尚未就此达成一致。</p>
<p>现行的协调世界时根据国际电信联盟的建议《Standard-frequency and time-signal emissions》(ITU-R TF.460-6)所确定。 UTC基于国际原子时，并通过不规则的加入闰秒来抵消地球自转变慢的影响[7]。闰秒在必要的时候会被插入到UTC中，以保证协调世界时（UTC）与世界时（UT1）相差不超过0.9秒[8]。</p>
<h3 id="格林尼治平时"><a href="#格林尼治平时" class="headerlink" title="格林尼治平时"></a>格林尼治平时</h3><p>格林尼治平时（英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台当地的平太阳时，因为本初子午线被定义为通过那里的经线。</p>
<p>自1924年2月5日开始，格林尼治天文台负责每隔一小时向全世界发放调时信息。</p>
<p>格林尼治平时的正午是指当平太阳横穿格林尼治子午线时（也就是在格林尼治上空最高点时）的时间。由于地球每天的自转是有些不规则的，而且正在缓慢减速，因此格林尼治平时基于天文观测本身的缺陷，已经被原子钟报时的协调世界时（UTC）所取代。</p>
]]></content>
      <categories>
        <category>HTML/CSS/JavaScript</category>
      </categories>
      <tags>
        <tag>时间</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 5.7.20 zip 安装与简单配置</title>
    <url>/blogs/2018/03/21/mysql-5-7-20-zip-%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="MySQL-5-7-20-下载和安装"><a href="#MySQL-5-7-20-下载和安装" class="headerlink" title="MySQL 5.7.20 下载和安装"></a>MySQL 5.7.20 下载和安装</h2><ol>
<li><p>首先上 MySQL 的官网下载  <a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p>
<p> <img src="/blogs/2018/03/21/mysql-5-7-20-zip-%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/MySQL%E4%B8%8B%E8%BD%BD%E7%95%8C%E9%9D%A2.png" alt="MySQL 下载界面"></p>
 <span id="more"></span></li>
<li><p>下载完解压到你想要存放的位置（我这里是解压到 <code>D:\MySQL</code>）</p>
</li>
<li><p>设置环境变量（我使用的是 Win10 系统）</p>
<p> 创建 <code>MYSQL_HOME</code> 变量，变量值为之前数据库 zip 解压的位置</p>
<p> <img src="/blogs/2018/03/21/mysql-5-7-20-zip-%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FMYSQL_HOME.png" alt="环境变量 MYSQL_HOME"></p>
<p> 在 <code>Path</code> 变量中添加 <code>%MYSQL_HOME%\bin</code></p>
<p> <img src="/blogs/2018/03/21/mysql-5-7-20-zip-%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/Path%E6%B7%BB%E5%8A%A0MYSQL_HOME.png" alt="Path 添加 MYSQL_HOME"></p>
<p> 最后保存就完成了 MySQL 的环境变量配置了</p>
</li>
<li><p>补充 data 目录和 my.ini 文件</p>
<p> 用管理员打开 PowerShell （右键系统左下角 Windows 徽标）</p>
<p> <img src="/blogs/2018/03/21/mysql-5-7-20-zip-%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/%E7%94%A8%E7%AE%A1%E7%90%86%E5%91%98%E6%89%93%E5%BC%80PowerShell.png" alt="用管理员打开 PowerShell"></p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; <span class="built_in">cd</span> D:/MySQL/bin</span><br><span class="line">PS D:\MySQL\bin&gt; mysqld --initialize-insecure --user=mysql</span><br></pre></td></tr></table></figure>

<p> 然后返回 MySQL 目录就会发现有 data 目录了</p>
<p> 直接创建 my.ini 文件，内容如下（这里内容不一定要按照下文，可以自行百度，但是其实都差不多）</p>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\MySQL</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\MySQL\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure></li>
<li><p>安装、启动和停止服务</p>
<p> 在 <code>D:\MySQL\bin</code> 下用管理员运行 PowerShell 输入命令 <code>mysqld -install</code> 如果出现 <em>Service successfully installed</em> 说明注册成功了</p>
<p> 接下来运行 <code>net start mysql</code> 命令启动 MySQL 服务</p>
<p> <code>net stop mysql</code> 命令停止 MySQL 服务</p>
</li>
</ol>
<h2 id="创建数据库、删除数据库、添加用户、用户授权、删除用户、修改密码等操作"><a href="#创建数据库、删除数据库、添加用户、用户授权、删除用户、修改密码等操作" class="headerlink" title="创建数据库、删除数据库、添加用户、用户授权、删除用户、修改密码等操作"></a>创建数据库、删除数据库、添加用户、用户授权、删除用户、修改密码等操作</h2><ol>
<li><p>创建数据库</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database testDB;</span><br></pre></td></tr></table></figure></li>
<li><p>删除数据库</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database testDB;</span><br></pre></td></tr></table></figure></li>
<li><p>新建用户</p>
<p> 创建 <code>test</code> 用户，密码是 <code>test</code></p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span>  test@<span class="string">&#x27;localhost&#x27;</span> identified  <span class="keyword">by</span> <span class="string">&#x27;test&#x27;</span> ; #本地登录</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span>  test@<span class="string">&#x27;%&#x27;</span>  identified  <span class="keyword">by</span> <span class="string">&#x27;test&#x27;</span> ; #远程登录</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p> 使用 <code>exit</code> 命令退出当前用户的登陆后用 <code>mysql -u test -p</code> 测试是否创建成功</p>
</li>
<li><p>为用户授权</p>
<p> a. 授权格式：grant 权限 on 数据库.* to 用户名@登录主机 identified by ‘密码’</p>
<p> b. 以 root 身份登录 MySQL</p>
<p> c. 为用户创建一个数据库（testDB）：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database testDB;</span><br><span class="line"><span class="keyword">create</span> database testDB <span class="keyword">default</span> charset utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>

<p> d. 授权 test 用户拥有 testDB 数据库的所有权限：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> testDB.<span class="operator">*</span> <span class="keyword">to</span> test@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span>  <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line">flush privileges; #刷新系统权限表</span><br></pre></td></tr></table></figure>

<p> e. 指定部分权限给用户:</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,update <span class="keyword">on</span> testDB.<span class="operator">*</span> <span class="keyword">to</span>  test@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span>  <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line">flush privileges; #刷新系统权限表</span><br></pre></td></tr></table></figure>

<p> f.授权 test 用户拥有所有数据库的某些权限：</p>
<p> grant select,delete,update,create,drop on . to test@’%’  identified by ‘1234’;  #”%” 表示对所有非本地主机授权，不包括 localhost</p>
</li>
<li><p>删除用户</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line"><span class="keyword">delete</span>  <span class="keyword">from</span>  mysql.user <span class="keyword">where</span>  <span class="string">&#x27;test&#x27;</span> <span class="keyword">and</span>  host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="keyword">drop</span> database testDB;</span><br></pre></td></tr></table></figure>

<p> 删除账户及权限：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> 用户名@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> 用户名@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>修改指定用户密码</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">update mysql.user <span class="keyword">set</span> authentication_string<span class="operator">=</span>password(<span class="string">&#x27;新密码&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;test&#x27;</span> <span class="keyword">and</span>  host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p><code>show databases;</code> # 显示所有数据库</p>
<p><code>show tables;</code> # 显示当前数据库所有的表</p>
<p><code>select database();</code> # 显示当前所使用的数据库</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>范式（NF）</title>
    <url>/blogs/2018/02/01/%E8%8C%83%E5%BC%8F%EF%BC%88nf%EF%BC%89/</url>
    <content><![CDATA[<p>按照教材中的定义，范式是“符合某一种级别的关系模式的集合，表示一个关系内部各属性之间的联系的合理化程度”。很晦涩吧？实际上你可以把它粗略地理解为<strong>一张数据表的表结构所符合的某种设计标准的级别</strong>。就像家里装修买建材，最环保的是 E0 级，其次是 E1 级，还有 E2 级等等。数据库范式也分为 1NF、2NF、3NF、BCNF、4NF、5NF。一般在我们设计关系型数据库的时候，最多考虑到 BCNF 就够。符合高一级范式的设计，必定符合低一级范式，例如符合 2NF 的关系模式，必定符合 1NF。</p>
<span id="more"></span>

<h2 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h2><p><strong>定义：符合1NF的关系中的每个属性都不可再分。</strong>实际上，<strong>1NF是所有关系型数据库的最基本要求</strong></p>
<h2 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h2><p>2NF 对 1NF 的改进是，<strong>2NF 在 1NF 的基础之上，消除了非主属性对于码的部分函数依赖</strong>。接下来对这句话中涉及到的四个概念——<strong>“函数依赖”</strong>、<strong>“码”</strong>、<strong>“非主属性”</strong>、与<strong>“部分函数依赖”</strong>进行一下解释。</p>
<h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><p>我们可以这么理解（但并不是特别严格的定义）：<strong>若在一张表中，在属性（或属性组）X的值确定的情况下，必定能确定属性Y的值，那么就可以说Y函数依赖于X，写作 X → Y</strong>。也就是说，在数据表中，不存在任意两条记录，它们在X属性（或属性组）上的值相同，而在Y属性上的值不同。这也就是“函数依赖”名字的由来，类似于函数关系 y = f(x)，在x的值确定的情况下，y的值一定是确定的。</p>
<h3 id="完全函数依赖"><a href="#完全函数依赖" class="headerlink" title="完全函数依赖"></a>完全函数依赖</h3><p>在一张表中，若 X → Y，且对于 X 的任何一个真子集（假如属性组 X 包含超过一个属性的话），X ‘ → Y 不成立，那么我们称 Y 对于 X <strong>完全函数依赖</strong>，记作 X F→ Y。（那个F应该写在箭头的正上方，没办法打出来……，正确的写法如<strong>下图</strong>）</p>
<p><img src="https://pic4.zhimg.com/50/12513de20079d12b99d946072df7311a_hd.jpg" alt="img"></p>
<h3 id="部分函数依赖"><a href="#部分函数依赖" class="headerlink" title="部分函数依赖"></a>部分函数依赖</h3><p>假如 Y 函数依赖于 X，但同时 Y 并不完全函数依赖于 X，那么我们就称 Y 部分函数依赖于 X，记作 X  P→ Y，如<strong>下图</strong>。</p>
<p><img src="https://pic2.zhimg.com/50/10b52b39b18b8ea9fb17b46babf4d20f_hd.jpg" alt="img"></p>
<h3 id="传递函数依赖"><a href="#传递函数依赖" class="headerlink" title="传递函数依赖"></a>传递函数依赖</h3><p>假如 Z 函数依赖于 Y，且 Y 函数依赖于 X （前提是：Y 不包含于 X，且 X 不函数依赖于 Y），那么我们就称 Z 传递函数依赖于 X ，记作 X T→ Z，如<strong>下图</strong>。</p>
<p><img src="https://pic4.zhimg.com/50/51f8105fbbe92adaa3e343ea2db3bf49_hd.jpg" alt="img"></p>
<h3 id="码"><a href="#码" class="headerlink" title="码"></a>码</h3><p>设 K 为某表中的一个属性或属性组，若除 K 之外的所有属性都完全函数依赖于 K（这个“完全”不要漏了），那么我们称 K 为<strong>候选码</strong>，简称为<strong>码</strong>。在实际中我们通常可以理解为：<strong>假如当 K 确定的情况下，该表除 K 之外的所有属性的值也就随之确定，那么 K 就是码</strong>。一张表中可以有超过一个码。（实际应用中为了方便，通常选择其中的一个码作为<strong>主码</strong>）</p>
<h3 id="非主属性"><a href="#非主属性" class="headerlink" title="非主属性"></a>非主属性</h3><p>不包含在任何一个码中的属性为非主属性。</p>
<h2 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h2><p><strong>3NF 在 2NF 的基础之上，消除了非主属性对于码的传递函数依赖</strong>。也就是说， 如果存在非主属性对于码的传递函数依赖，则不符合 3NF 的要求。</p>
<h2 id="BC范式（BCNF）"><a href="#BC范式（BCNF）" class="headerlink" title="BC范式（BCNF）"></a>BC范式（BCNF）</h2><p>BCNF 在 3NF 的基础上消除<strong>主属性</strong>对于码的部分与传递函数依赖。</p>
<h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p><a href="https://www.zhihu.com/question/24696366">解释一下关系数据库的第一第二第三范式？ - 知乎</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>范式</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/blogs/2018/03/06/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><strong>二叉树</strong>是一种层次结构，它要么是空集，要么是由一个称为<strong>根（root）</strong>的元素和两棵不同的二叉树组成的，这两棵二叉树分别称为<strong>左子树（left subtree）</strong>和<strong>右子树（righr subtree）</strong>。允许这两棵子树中的一棵或者两棵为空。二叉树的示例如下图所示。</p>
<p><img src="/blogs/2018/03/06/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91.jpg" alt="二叉查找树"></p>
<p>一条路径的<strong>长度（length）</strong>是指在该条路径上的边的个数。一个结点的<strong>深度（depth）</strong>是指从根结点到该结点的路径长度。有时候，我们将一棵树中具有某个给定深度的所有结点的集合称为该树的一<strong>层（level）</strong>。<strong>兄弟结点</strong>是共享同一父结点的结点。一个结点的左（右）子树的根结点称为这个结点的<strong>左（右）孩子（left (right) child）</strong>。没有孩子的结点称为<strong>叶结点（leaf）</strong>。空树的<strong>高度</strong>为 0。非空树的高度是从根结点到它的最远的叶子结点的路径长度 +1。考虑上图中的树，从结点 30 到 10 的路径的长度为 2，结点 30 的深度为 0，结点 20 的深度为 1，而结点 10 的深度为 2。这棵树的高度为 3。结点 10 和 25 是兄弟结点。结点 10、25、35、50 都在同一层。</p>
<h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><p>一种称为<strong>二叉查找树（binary search tree，BST）</strong>的特殊类型的二叉树通常是非常有用的。二叉查找树（没有重复元素）的特征是：对于树中的每一个结点，它的左子树中结点的值都小于该结点的值，而它的右子树中结点的值都大于该结点的值。上面的二叉树就是一个二叉查找树。</p>
<span id="more"></span>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tree</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTree</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Tree</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        Iterator&lt;E&gt; iterator = iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) result++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSize() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (E it : <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.equals(it)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">AbstractTree</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryTree</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryTree</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = <span class="keyword">new</span> TreeNode(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        TreeNode current = root;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> compareTo = e.compareTo(current.element);</span><br><span class="line">            <span class="keyword">if</span> (compareTo &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                current = current.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareTo &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                current = current.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            root = <span class="keyword">new</span> TreeNode(e);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode parent;</span><br><span class="line">            TreeNode current;</span><br><span class="line">            parent = current = root;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> compareTo = e.compareTo(current.element);</span><br><span class="line">                <span class="keyword">if</span> (compareTo &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    parent = current;</span><br><span class="line">                    current = current.left;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareTo &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    parent = current;</span><br><span class="line">                    current = current.right;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> compareTo = e.compareTo(parent.element);</span><br><span class="line">            <span class="keyword">if</span> (compareTo &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                parent.left = <span class="keyword">new</span> TreeNode(e);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareTo &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                parent.right = <span class="keyword">new</span> TreeNode(e);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        TreeNode parent = <span class="keyword">null</span>;</span><br><span class="line">        TreeNode current = root;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> compareTo = e.compareTo(current.element);</span><br><span class="line">            <span class="keyword">if</span> (compareTo &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                parent = current;</span><br><span class="line">                current = current.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareTo &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                parent = current;</span><br><span class="line">                current = current.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (current.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 待删除结点的左子树为空</span></span><br><span class="line">            <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 待删除结点为根结点</span></span><br><span class="line">                root = current.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 右子树连接到父结点</span></span><br><span class="line">                <span class="keyword">if</span> (parent.left == current) parent.left = current.right;</span><br><span class="line">                <span class="keyword">else</span> parent.right = current.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode rightMostParent = current;</span><br><span class="line">            TreeNode rightMost = current.left;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找出待删除结点的左子树的最右结点</span></span><br><span class="line">            <span class="keyword">while</span> (rightMost.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                rightMostParent = rightMost;</span><br><span class="line">                rightMost = rightMost.right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将最右结点复制到待删除结点</span></span><br><span class="line">            current.element = rightMost.element;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 最右结点的左子树连接到最右结点的父结点</span></span><br><span class="line">            <span class="keyword">if</span> (rightMostParent.right == rightMost) &#123;</span><br><span class="line">                rightMostParent.right = rightMost.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rightMostParent.left = rightMost.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 广度优先迭代器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">breadthIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BreadthItr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历迭代器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">inIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InItr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历迭代器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">preIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PreItr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序遍历迭代器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">postIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PostItr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InItr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BreadthItr</span> <span class="keyword">extends</span> <span class="title">AbsItr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createList</span><span class="params">(TreeNode root, List&lt;E&gt; searchOrders)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            queue.offer(root);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                TreeNode current = queue.poll();</span><br><span class="line">                searchOrders.add(current.element);</span><br><span class="line">                <span class="keyword">if</span> (current.left != <span class="keyword">null</span>) queue.offer(current.left);</span><br><span class="line">                <span class="keyword">if</span> (current.right != <span class="keyword">null</span>) queue.offer(current.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PreItr</span> <span class="keyword">extends</span> <span class="title">AbsItr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createList</span><span class="params">(TreeNode root, List&lt;E&gt; searchOrders)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            searchOrders.add(root.element);</span><br><span class="line">            createList(root.left, searchOrders);</span><br><span class="line">            createList(root.right, searchOrders);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InItr</span> <span class="keyword">extends</span> <span class="title">AbsItr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createList</span><span class="params">(TreeNode root, List&lt;E&gt; searchOrders)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            createList(root.left, searchOrders);</span><br><span class="line">            searchOrders.add(root.element);</span><br><span class="line">            createList(root.right, searchOrders);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">PostItr</span> <span class="keyword">extends</span> <span class="title">AbsItr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createList</span><span class="params">(TreeNode root, List&lt;E&gt; searchOrders)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            createList(root.left, searchOrders);</span><br><span class="line">            createList(root.right, searchOrders);</span><br><span class="line">            searchOrders.add(root.element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsItr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        List&lt;E&gt; searchOrders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> currentIndex = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        AbsItr() &#123;</span><br><span class="line">            createList(root, searchOrders);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">createList</span><span class="params">(TreeNode root, List&lt;E&gt; searchOrders)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> currentIndex &lt; searchOrders.size() - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> searchOrders.get(++currentIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line"></span><br><span class="line">        TreeNode(E e) &#123;</span><br><span class="line">            element = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>图</title>
    <url>/blogs/2018/03/07/%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p><strong>图（graph）</strong>是一种数学结构，它表示真实世界中实体之间的关系。</p>
<p>一个图包含了非空的顶点、结点或者点，以及一个连接顶点的边的集合。为方便起见，我们这样定义一个图 <code>G=(V,E)</code>，其中 <code>V</code> 代表顶点的集合，<code>E</code> 代表边的集合。</p>
<p>图可以是有向的，也可以是无向的。在有向图中，每条边都有一个方向，表明可以沿着这条边将个顶点移动到另一个顶点，可以使用有向图来对父子之间的关系进行建模，其中从顶点 A 到 B 的边表示 A 是 B 的父亲。</p>
<p>边可以是加权的，也可以是非加权的。</p>
<p>如果图中的两个顶点被同一条边连接，那么它们被称为<strong>相邻的（adjacent）</strong>。相似地，如果两条边连接到同一个顶点，它们也被称为相邻的。在图中，连接两个顶点的边称为<strong>连接（incident）</strong>到这两个顶点。顶点的<strong>度（degree）</strong>就是与这个顶点连接的边的条数。</p>
<p>如果两个顶点是相邻的，那么它们互为<strong>邻居（neighbor）</strong>。类似地，两条相邻的边也互为邻居。</p>
<p>一个<strong>环（1oop）</strong>是一条将顶点连接到它自身的边。如果两个顶点可通过两条或者多条边相连，这些边就称为<strong>平行边（parallel edge）</strong>。</p>
<p><strong>简单图（simple graph）</strong>是指没有环和平行边的图，<strong>完整图（complete graph）</strong>是指每一对顶点都相连的图。</p>
<span id="more"></span>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Graph</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回图中顶点个数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 顶点个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回图中顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 图中顶点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;V&gt; <span class="title">getVertices</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回指定顶点下标的顶点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 顶点下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 顶点对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">getVertex</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回指定顶点对象的下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 顶点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 顶点下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(V v)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回指定顶点下标的顶点邻居</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 顶点下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 顶点邻居</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Integer&gt; <span class="title">getNeighbors</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回指定顶点下标的度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 顶点下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 顶点的度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDegree</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回邻接矩阵</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 邻接矩阵</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span>[][] getAdjacencyMatrix();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个深度优先搜索树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 作为搜索树根结点的结点下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 深度优先搜索树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AbstractGraph&lt;V&gt;.<span class="function">Tree <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个广度优先搜索树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 作为搜索树根结点的结点下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 广度优先搜索树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AbstractGraph&lt;V&gt;.<span class="function">Tree <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractGraph</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Graph</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;V&gt; vertices;</span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; neighbors;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractGraph</span><span class="params">(<span class="keyword">int</span>[][] edges, V[] vertices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vertices = <span class="keyword">new</span> ArrayList&lt;&gt;(vertices.length);</span><br><span class="line">        <span class="keyword">this</span>.vertices.addAll(Arrays.asList(vertices));</span><br><span class="line">        createAdjacencyLists(edges, vertices.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractGraph</span><span class="params">(List&lt;Edge&gt; edges, List&lt;V&gt; vertices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vertices = vertices;</span><br><span class="line">        createAdjacencyLists(edges, vertices.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createAdjacencyLists</span><span class="params">(<span class="keyword">int</span>[][] edges, <span class="keyword">int</span> numberOfVertices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.neighbors = <span class="keyword">new</span> ArrayList&lt;&gt;(numberOfVertices);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfVertices; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.neighbors.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] edge : edges) &#123;</span><br><span class="line">            neighbors.get(edge[<span class="number">0</span>]).add(edge[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createAdjacencyLists</span><span class="params">(List&lt;Edge&gt; edges, <span class="keyword">int</span> numberOfVertices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.neighbors = <span class="keyword">new</span> ArrayList&lt;&gt;(numberOfVertices);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numberOfVertices; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.neighbors.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Edge edge : edges) &#123;</span><br><span class="line">            neighbors.get(edge.u).add(edge.v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.vertices.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;V&gt; <span class="title">getVertices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.vertices;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getVertex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.vertices.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(V v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.vertices.indexOf(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNeighbors</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.neighbors.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDegree</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.neighbors.get(index).size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] getAdjacencyMatrix() &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] adjacencyMatrix = <span class="keyword">new</span> <span class="keyword">int</span>[getSize()][getSize()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.neighbors.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.neighbors.get(i).size(); j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = <span class="keyword">this</span>.neighbors.get(i).get(j);</span><br><span class="line">                adjacencyMatrix[i][v] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> adjacencyMatrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AbstractGraph&lt;V&gt;.<span class="function">Tree <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; searchOrders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] parent = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.vertices.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parent.length; i++)</span><br><span class="line">            parent[i] = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[] isVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="keyword">this</span>.vertices.size()];</span><br><span class="line"></span><br><span class="line">        dfs(v, parent, searchOrders, isVisited);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tree(v, parent, searchOrders);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span>[] parent, List&lt;Integer&gt; searchOrders, <span class="keyword">boolean</span>[] isVisited)</span> </span>&#123;</span><br><span class="line">        searchOrders.add(v);</span><br><span class="line">        isVisited[v] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : <span class="keyword">this</span>.neighbors.get(v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isVisited[i]) &#123;</span><br><span class="line">                parent[i] = v;</span><br><span class="line">                dfs(i, parent, searchOrders, isVisited);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AbstractGraph&lt;V&gt;.<span class="function">Tree <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; searchOrders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] parent = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.vertices.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parent.length; i++)</span><br><span class="line">            parent[i] = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span>[] isVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="keyword">this</span>.vertices.size()];</span><br><span class="line">        queue.offer(v);</span><br><span class="line">        isVisited[v] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = queue.poll();</span><br><span class="line">            searchOrders.add(u);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> w : <span class="keyword">this</span>.neighbors.get(u)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!isVisited[w]) &#123;</span><br><span class="line">                    queue.offer(w);</span><br><span class="line">                    parent[w] = u;</span><br><span class="line">                    isVisited[w] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tree(v, parent, searchOrders);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.u = u;</span><br><span class="line">            <span class="keyword">this</span>.v = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 树的根结点</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> root;</span><br><span class="line">        <span class="comment">// 顶点的父结点</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">        <span class="comment">// 遍历顶点的顺序</span></span><br><span class="line">        <span class="keyword">private</span> List&lt;Integer&gt; searchOrders;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Tree</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span>[] parent, List&lt;Integer&gt; searchOrders)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root = root;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">this</span>.searchOrders = searchOrders;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Tree</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span>[] parent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root = root;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回树的根结点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回指定顶点下标的父结点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getParent</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.parent[v];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回被搜索顶点的顺序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getSearchOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.searchOrders;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回被搜索顶点的个数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumberOfVerticesFound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.searchOrders.size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回从指定顶点下标到根结点的顶点列表</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;V&gt; <span class="title">getPath</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            ArrayList&lt;V&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                path.add(AbstractGraph.<span class="keyword">this</span>.vertices.get(index));</span><br><span class="line">                index = <span class="keyword">this</span>.parent[index];</span><br><span class="line">            &#125; <span class="keyword">while</span> (index != <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnweightedGraph</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractGraph</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnweightedGraph</span><span class="params">(<span class="keyword">int</span>[][] edges, V[] vertices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(edges, vertices);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnweightedGraph</span><span class="params">(List&lt;Edge&gt; edges, List&lt;V&gt; vertices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(edges, vertices);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> graph.AbstractGraph;</span><br><span class="line"><span class="keyword">import</span> graph.Graph;</span><br><span class="line"><span class="keyword">import</span> graph.UnweightedGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] vertices = &#123;</span><br><span class="line">                <span class="string">&quot;Seattle&quot;</span>,</span><br><span class="line">                <span class="string">&quot;San Francisco&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Los Angeles&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Denver&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Kansas City&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Chicago&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Boston&quot;</span>,</span><br><span class="line">                <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Atlanta&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Miami&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Dallas&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Houston&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span>[][] edges = &#123;</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">5</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">4</span>&#125;, &#123;<span class="number">2</span>, <span class="number">10</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>, <span class="number">0</span>&#125;, &#123;<span class="number">3</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">3</span>, <span class="number">5</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>, <span class="number">2</span>&#125;, &#123;<span class="number">4</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">4</span>, <span class="number">7</span>&#125;, &#123;<span class="number">4</span>, <span class="number">8</span>&#125;, &#123;<span class="number">4</span>, <span class="number">10</span>&#125;,</span><br><span class="line">                &#123;<span class="number">5</span>, <span class="number">0</span>&#125;, &#123;<span class="number">5</span>, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">5</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                &#123;<span class="number">6</span>, <span class="number">5</span>&#125;, &#123;<span class="number">6</span>, <span class="number">7</span>&#125;,</span><br><span class="line">                &#123;<span class="number">7</span>, <span class="number">4</span>&#125;, &#123;<span class="number">7</span>, <span class="number">5</span>&#125;, &#123;<span class="number">7</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                &#123;<span class="number">8</span>, <span class="number">4</span>&#125;, &#123;<span class="number">8</span>, <span class="number">7</span>&#125;, &#123;<span class="number">8</span>, <span class="number">9</span>&#125;, &#123;<span class="number">8</span>, <span class="number">10</span>&#125;, &#123;<span class="number">8</span>, <span class="number">11</span>&#125;,</span><br><span class="line">                &#123;<span class="number">9</span>, <span class="number">8</span>&#125;, &#123;<span class="number">9</span>, <span class="number">11</span>&#125;,</span><br><span class="line">                &#123;<span class="number">10</span>, <span class="number">2</span>&#125;, &#123;<span class="number">10</span>, <span class="number">4</span>&#125;, &#123;<span class="number">10</span>, <span class="number">8</span>&#125;, &#123;<span class="number">10</span>, <span class="number">11</span>&#125;,</span><br><span class="line">                &#123;<span class="number">11</span>, <span class="number">8</span>&#125;, &#123;<span class="number">11</span>, <span class="number">9</span>&#125;, &#123;<span class="number">11</span>, <span class="number">10</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Graph&lt;String&gt; graph1 = <span class="keyword">new</span> UnweightedGraph&lt;&gt;(edges, vertices);</span><br><span class="line">        System.out.println(<span class="string">&quot;The number of vertices in graph1: &quot;</span> + graph1.getSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;The vertex with index 1 is &quot;</span> + graph1.getVertex(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;The index for Miami is &quot;</span> + graph1.getIndex(<span class="string">&quot;Miami&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;The edges for graph1:&quot;</span>);</span><br><span class="line">        printEdges(graph1);</span><br><span class="line">        System.out.println(<span class="string">&quot;Adjacency matrix for graph1:&quot;</span>);</span><br><span class="line">        printAdjacencyMatrix(graph1);</span><br><span class="line"></span><br><span class="line">        AbstractGraph&lt;String&gt;.Tree dfs = graph1.dfs(<span class="number">5</span>);</span><br><span class="line">        List&lt;Integer&gt; searchOrders = dfs.getSearchOrders();</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;%d vertices are searched in this DFS order:&quot;</span>, dfs.getNumberOfVerticesFound()));</span><br><span class="line">        <span class="keyword">for</span> (Integer i : searchOrders)</span><br><span class="line">            System.out.print(graph1.getVertex(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; searchOrders.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfs.getParent(i) != -<span class="number">1</span>)</span><br><span class="line">                System.out.println(String.format(<span class="string">&quot;parent of %s is %s&quot;</span>, graph1.getVertex(i),</span><br><span class="line">                        graph1.getVertex(dfs.getParent(i))));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] names = &#123;</span><br><span class="line">                <span class="string">&quot;Pater&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mark&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Cindy&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Wendy&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        ArrayList&lt;AbstractGraph.Edge&gt; edgeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        edgeList.add(<span class="keyword">new</span> AbstractGraph.Edge(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">        edgeList.add(<span class="keyword">new</span> AbstractGraph.Edge(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        edgeList.add(<span class="keyword">new</span> AbstractGraph.Edge(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">        edgeList.add(<span class="keyword">new</span> AbstractGraph.Edge(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        Graph&lt;String&gt; graph2 = <span class="keyword">new</span> UnweightedGraph&lt;&gt;(edgeList, Arrays.asList(names));</span><br><span class="line">        System.out.println(<span class="string">&quot;The edges for graph2:&quot;</span>);</span><br><span class="line">        printEdges(graph2);</span><br><span class="line">        System.out.println(<span class="string">&quot;Adjacency matrix for graph2:&quot;</span>);</span><br><span class="line">        printAdjacencyMatrix(graph2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph2.getSize(); i++) &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;vertex %d: %s&quot;</span>, i, graph2.getVertex(i)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        BinaryTree&lt;Integer&gt; tree = <span class="keyword">new</span> BinaryTree&lt;&gt;();</span><br><span class="line">        tree.insert(<span class="number">20</span>);</span><br><span class="line">        tree.insert(<span class="number">10</span>);</span><br><span class="line">        tree.insert(<span class="number">16</span>);</span><br><span class="line">        tree.insert(<span class="number">14</span>);</span><br><span class="line">        tree.insert(<span class="number">40</span>);</span><br><span class="line">        tree.insert(<span class="number">30</span>);</span><br><span class="line">        tree.insert(<span class="number">27</span>);</span><br><span class="line">        tree.insert(<span class="number">80</span>);</span><br><span class="line">        tree.insert(<span class="number">50</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; breadthIterator = tree.breadthIterator();</span><br><span class="line">        System.out.println(<span class="string">&quot;Breadth-First Search:&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (breadthIterator.hasNext())</span><br><span class="line">            System.out.print(breadthIterator.next() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Inorder Traversal:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer e : tree)</span><br><span class="line">            System.out.print(e + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printEdges</span><span class="params">(Graph&lt;?&gt; graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.getSize(); i++) &#123;</span><br><span class="line">            System.out.print(String.format(<span class="string">&quot;Vertex %-2d: &quot;</span>, i));</span><br><span class="line">            <span class="keyword">for</span> (Integer neighbor : graph.getNeighbors(i)) &#123;</span><br><span class="line">                System.out.print(String.format(<span class="string">&quot;(%d, %d) &quot;</span>, i, neighbor));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printAdjacencyMatrix</span><span class="params">(Graph&lt;?&gt; graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] u : graph.getAdjacencyMatrix()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v : u) &#123;</span><br><span class="line">                System.out.print(v + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>/blogs/2018/04/11/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序算法基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Comparable&lt;T&gt;[] sort(Comparable&lt;T&gt;[] arr);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable&lt;T&gt; a, Comparable&lt;T&gt; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo((T) b) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">exchange</span><span class="params">(Comparable&lt;T&gt;[] arr, <span class="keyword">int</span> position1, <span class="keyword">int</span> position2)</span> </span>&#123;</span><br><span class="line">        Comparable&lt;T&gt; tmp = arr[position1];</span><br><span class="line">        arr[position1] = arr[position2];</span><br><span class="line">        arr[position2] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbsSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Comparable&lt;T&gt;[] sort(Comparable&lt;T&gt;[] arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (less(arr[j], arr[i])) exchange(arr, j, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbsSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Comparable&lt;T&gt;[] sort(Comparable&lt;T&gt;[] arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(arr[j], arr[j - <span class="number">1</span>]); j--) &#123;</span><br><span class="line">                exchange(arr, j, j - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbsSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Comparable&lt;T&gt;[] sort(Comparable&lt;T&gt;[] arr) &#123;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 1, 4, 13, 40, 121, 364, 1093, ...</span></span><br><span class="line">        <span class="keyword">while</span> (h &lt; arr.length / <span class="number">3</span>) h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; less(arr[j], arr[j - h]); j -= h) &#123;</span><br><span class="line">                    exchange(arr, j, j - h);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h = h / <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序：自顶向下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort1</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbsSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Comparable&lt;T&gt;[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Comparable&lt;T&gt;[] sort(Comparable&lt;T&gt;[] arr) &#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[arr.length];</span><br><span class="line">        sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable&lt;T&gt;[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (high &lt;= low) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        sort(arr, low, mid);</span><br><span class="line">        sort(arr, mid + <span class="number">1</span>, high);</span><br><span class="line">        merge(arr, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable&lt;T&gt;[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = low, j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; k++) &#123;</span><br><span class="line">            aux[k] = arr[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) arr[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; high) arr[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) arr[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> arr[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序：自底向下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort2</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbsSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Comparable&lt;T&gt;[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Comparable&lt;T&gt;[] sort(Comparable&lt;T&gt;[] arr) &#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[arr.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; arr.length; sz += sz) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> low = <span class="number">0</span>; low &lt; arr.length - sz; low += (sz + sz)) &#123;</span><br><span class="line">                merge(arr, low, low + sz - <span class="number">1</span>, Math.min(low + sz + sz - <span class="number">1</span>, arr.length - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable&lt;T&gt;[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = low, j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; k++) &#123;</span><br><span class="line">            aux[k] = arr[k];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) arr[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; high) arr[k] = aux[i++];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) arr[k] = aux[j++];</span><br><span class="line">            <span class="keyword">else</span> arr[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbsSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Comparable&lt;T&gt;[] sort(Comparable&lt;T&gt;[] arr) &#123;</span><br><span class="line">        sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable&lt;T&gt;[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = partition(arr, low, high);</span><br><span class="line">        sort(arr, low, mid - <span class="number">1</span>);</span><br><span class="line">        sort(arr, mid + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable&lt;T&gt;[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将数组分为 arr[low..mid-1] arr[mid] arr[mid+1..high]</span></span><br><span class="line">        <span class="comment">// 左右扫描下标</span></span><br><span class="line">        <span class="keyword">int</span> i = low, j = high + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 切分元素</span></span><br><span class="line">        Comparable&lt;T&gt; a = arr[low];</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (less(arr[++i], a))</span><br><span class="line">                <span class="keyword">if</span> (i == high) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">while</span> (less(a, arr[--j]))</span><br><span class="line">                <span class="keyword">if</span> (j == low) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">            exchange(arr, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        exchange(arr, low, j);</span><br><span class="line">        <span class="comment">// 返回较小的下标</span></span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Hooks 实现自动触发 Jenkins 构建</title>
    <url>/blogs/2021/08/16/git-hooks-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91-jenkins-%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="Git-Hooks-介绍"><a href="#Git-Hooks-介绍" class="headerlink" title="Git Hooks 介绍"></a>Git Hooks 介绍</h2><p>官方介绍如下：</p>
<blockquote>
<p>和其它版本控制系统一样，Git 能在特定的操作发生时触发自定义的脚本。Git 有两组这样的钩子（Hooks）：客户端的和服务器端的。客户端钩子由诸如提交（commit）和合并（merge）这样的操作所调用，而服务器端钩子作用于诸如接收被推送（push）的提交这样的联网操作。<a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">[1]</a>  </p>
<p>英文原文：<br>Like many other Version Control Systems, Git has a way to fire off custom scripts when certain important actions occur. There are two groups of these hooks: client-side and server-side. Client-side hooks are triggered by operations such as committing and merging, while server-side hooks run on network operations such as receiving pushed commits. You can use these hooks for all sorts of reasons.</p>
</blockquote>
<span id="more"></span>

<p>关于 Git Hooks 诸多种类的详细介绍不在这篇文章讲解，之后再补充这些知识（更多请参阅 <a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">8.3 自定义 Git - Git 钩子</a>）。我们先关注现在的需求。</p>
<h2 id="分析需求"><a href="#分析需求" class="headerlink" title="分析需求"></a>分析需求</h2><p>现在的需求是我们希望通过 Git 将本地的代码推送到远程仓库之后，可以自动触发 Jenkins 的构建任务。</p>
<p>这里找到一个钩子是可以满足我们的需求的。</p>
<blockquote>
<p>post-receive<br>post-receive 挂钩在处理来自客户端的推送操作的整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。它接受与 pre-receive 相同的标准输入数据。它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器，或者更新问题追踪系统（ticket-tracking system）—— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态，所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。<a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">[1]</a></p>
</blockquote>
<p>官方对于这个钩子的介绍也提到了，这个钩子可以用于通知持续集成的服务器，在这里我们使用的是 Jenkins。</p>
<p>我们还需要考虑，并不是推送任意的分支都需要触发 Jenkins 的构建，通常我们只需要监控某些的分支，只要这些分支有改动，就触发构建。<br>那么我们就需要事先了解一下 post-receive 接收的参数是什么。这里直接揭晓答案，post-receive 可以从标准输入获取 3 个参数，分别是：</p>
<ol>
<li>推送前的引用指向的内容的 SHA-1 值</li>
<li>用户准备推送的内容的 SHA-1 值</li>
<li>引用的名字（分支）</li>
</ol>
<p>像这样 <code>709a5b25284f39527498e965f611731ff29b3336 e5c915867124fee7e8e2247845955e3634013eb6 refs/heads/master</code>。<br>如果用户推送的是一条全新的分支，第一个参数将会是 <code>0000000000000000000000000000000000000000</code>；<br>如果用户在本地删除远程分支（像这样：<code>git push origin :refs/heads/master</code>），第二个参数将会是 <code>0000000000000000000000000000000000000000</code>。</p>
<p>知道了第 3 个参数是一个分支名称，那我们就根据分支名称来决定是否触发 Jenkins 的构建了。</p>
<p>此外，我们还需要知道要如何触发 Jenkins 的构建，Jenkins 提供了什么样接口来让我们调用它的构建任务的。</p>
<p>這段話是用來測試繁體字的。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">8.3 自定义 Git - Git 钩子</a></p>
]]></content>
      <categories>
        <category>版本控制</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Git Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令</title>
    <url>/blogs/2021/10/16/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="数据卷（Volumes）"><a href="#数据卷（Volumes）" class="headerlink" title="数据卷（Volumes）"></a>数据卷（Volumes）</h2><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://vuepress.mirror.docker-practice.com/">[1] Docker — 从入门到实践 | Docker 从入门到实践</a><br><a href="http://www.dockerinfo.net/document">[2] Docker中文文档 Docker概述-DockerInfo</a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 常用命令</title>
    <url>/blogs/2021/09/05/redis-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h2><h3 id="连接本地的-Redis-服务"><a href="#连接本地的-Redis-服务" class="headerlink" title="连接本地的 Redis 服务"></a>连接本地的 Redis 服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<p>该命令会连接本地的 Redis 服务。</p>
<h3 id="连接远程的-Redis-服务"><a href="#连接远程的-Redis-服务" class="headerlink" title="连接远程的 Redis 服务"></a>连接远程的 Redis 服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-cli -h 127.0.0.1 -p 6379 -a <span class="string">&#x27;password&#x27;</span></span></span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<p>该命令使用 <code>redis-cli</code> 命令连接到主机为 <code>127.0.0.1</code>，端口为 <code>6379</code> ，密码为 <code>password</code> 的 Redis 服务上。</p>
<h2 id="Redis-keys-命令"><a href="#Redis-keys-命令" class="headerlink" title="Redis keys 命令"></a>Redis keys 命令</h2><p>[1] <a href="https://redis.io/commands/copy">COPY – Redis</a><br>[2] <a href="https://www.runoob.com/redis/redis-keys.html">Redis 键(key) | 菜鸟教程</a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Subsystem for Linux (WSL)</title>
    <url>/blogs/2021/04/11/windows-subsystem-for-linux-wsl/</url>
    <content><![CDATA[<h2 id="什么是-WSL"><a href="#什么是-WSL" class="headerlink" title="什么是 WSL"></a>什么是 WSL</h2><p>适用于 Linux 的 Windows 子系统可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数命令行工具、实用工具和应用程序 - 且不会产生传统虚拟机或双启动设置开销。<a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">[1]</a></p>
<span id="more"></span>

<h2 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令 [2]"></a>常用命令 <a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">[2]</a></h2><h3 id="将-WSL-2-设置为默认版本"><a href="#将-WSL-2-设置为默认版本" class="headerlink" title="将 WSL 2 设置为默认版本"></a>将 WSL 2 设置为默认版本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="查看已安装的-WSL-的信息"><a href="#查看已安装的-WSL-的信息" class="headerlink" title="查看已安装的 WSL 的信息"></a>查看已安装的 WSL 的信息</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-list</span> -<span class="literal">-verbose</span></span><br><span class="line">wsl <span class="literal">-l</span> <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<h3 id="将-Linux-分发版设置为受某一-WSL-版本支持"><a href="#将-Linux-分发版设置为受某一-WSL-版本支持" class="headerlink" title="将 Linux 分发版设置为受某一 WSL 版本支持"></a>将 Linux 分发版设置为受某一 WSL 版本支持</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-version</span> &lt;distribution name&gt; &lt;versionNumber&gt;</span><br></pre></td></tr></table></figure>

<p>请确保将 <code>&lt;distribution name&gt;</code> 替换为你的分发版的实际名称，并将 <code>&lt;versionNumber&gt;</code> 替换为数字 <code>1</code> 或 <code>2</code>。可以随时更改回 WSL 1，方法是运行与上面相同的命令，但将 <code>2</code> 替换为 <code>1</code>。</p>
<h3 id="使-WSL-2-成为你的默认体系结构"><a href="#使-WSL-2-成为你的默认体系结构" class="headerlink" title="使 WSL 2 成为你的默认体系结构"></a>使 WSL 2 成为你的默认体系结构</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/about">[1] 关于适用于 Linux 的 Windows 子系统 | Microsoft Docs</a><br><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">[2] 在 Windows 10 上安装适用于 Linux 的 Windows 子系统 (WSL) | Microsoft Docs</a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 属性动画</title>
    <url>/blogs/2018/02/24/android-%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h2 id="Property-Animation-Overview"><a href="#Property-Animation-Overview" class="headerlink" title="Property Animation Overview"></a>Property Animation Overview</h2><p>The property animation system lets you define the following characteristics of an animation:</p>
<ul>
<li>Duration: You can specify the duration of an animation. The default length is 300 ms.</li>
<li>Time interpolation: You can specify how the values for the property are calculated as a function of the animation’s current elapsed time.</li>
<li>Repeat count and behavior: You can specify whether or not to have an animation repeat when it reaches the end of a duration and how many times to repeat the animation. You can also specify whether you want the animation to play back in reverse. Setting it to reverse plays the animation forwards then backwards repeatedly, until the number of repeats is reached.</li>
<li>Animator sets: You can group animations into logical sets that play together or sequentially or after specified delays.</li>
<li>Frame refresh delay: You can specify how often to refresh frames of your animation. The default is set to refresh every 10 ms, but the speed in which your application can refresh frames is ultimately dependent on how busy the system is overall and how fast the system can service the underlying timer.</li>
</ul>
<span id="more"></span>

<h2 id="API-Overview"><a href="#API-Overview" class="headerlink" title="API Overview"></a>API Overview</h2><p><strong>Table 1.</strong> Animators</p>
<table>
<thead>
<tr>
<th>Class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>ValueAnimator</td>
<td>The main timing engine for property animation that also computes the values for the property to be animated. It has all of the core functionality that calculates animation values and contains the timing details of each animation, information about whether an animation repeats, listeners that receive update events, and the ability to set custom types to evaluate. There are two pieces to animating properties: calculating the animated values and setting those values on the object and property that is being animated. ValueAnimator does not carry out the second piece, so you must listen for updates to values calculated by the ValueAnimator and modify the objects that you want to animate with your own logic. See the section about Animating with ValueAnimator for more information.</td>
</tr>
<tr>
<td>ObjectAnimator</td>
<td>A subclass of ValueAnimator that allows you to set a target object and object property to animate. This class updates the property accordingly when it computes a new value for the animation. You want to use ObjectAnimator most of the time, because it makes the process of animating values on target objects much easier. However, you sometimes want to use ValueAnimator directly because ObjectAnimator has a few more restrictions, such as requiring specific acessor methods to be present on the target object.</td>
</tr>
<tr>
<td>AnimatorSet</td>
<td>Provides a mechanism to group animations together so that they run in relation to one another. You can set animations to play together, sequentially, or after a specified delay. See the section about Choreographing multiple animations with Animator Sets for more information.</td>
</tr>
</tbody></table>
<p><strong>Table 2.</strong> Evaluators</p>
<table>
<thead>
<tr>
<th>Class/Interface</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>IntEvaluator</td>
<td>The default evaluator to calculate values for int properties.</td>
</tr>
<tr>
<td>FloatEvaluator</td>
<td>The default evaluator to calculate values for float properties.</td>
</tr>
<tr>
<td>ArgbEvaluator</td>
<td>The default evaluator to calculate values for color properties that are represented as hexidecimal values.</td>
</tr>
<tr>
<td>TypeEvaluator</td>
<td>An interface that allows you to create your own evaluator. If you are animating an object property that is not an int, float, or color, you must implement the TypeEvaluator interface to specify how to compute the object property’s animated values. You can also specify a custom TypeEvaluator for int, float, and color values as well, if you want to process those types differently than the default behavior. See the section about Using a TypeEvaluator for more information on how to write a custom evaluator.</td>
</tr>
</tbody></table>
<p><strong>Table 3.</strong> Interpolators</p>
<table>
<thead>
<tr>
<th>Class/Interface</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>AccelerateDecelerateInterpolator</td>
<td>An interpolator whose rate of change starts and ends slowly but accelerates through the middle.</td>
</tr>
<tr>
<td>AccelerateInterpolator</td>
<td>An interpolator whose rate of change starts out slowly and then accelerates.</td>
</tr>
<tr>
<td>AnticipateInterpolator</td>
<td>An interpolator whose change starts backward then flings forward.</td>
</tr>
<tr>
<td>AnticipateOvershootInterpolator</td>
<td>An interpolator whose change starts backward, flings forward and overshoots the target value, then finally goes back to the final value.</td>
</tr>
<tr>
<td>BounceInterpolator</td>
<td>An interpolator whose change bounces at the end.</td>
</tr>
<tr>
<td>CycleInterpolator</td>
<td>An interpolator whose animation repeats for a specified number of cycles.</td>
</tr>
<tr>
<td>DecelerateInterpolator</td>
<td>An interpolator whose rate of change starts out quickly and then decelerates.</td>
</tr>
<tr>
<td>LinearInterpolator</td>
<td>An interpolator whose rate of change is constant.</td>
</tr>
<tr>
<td>OvershootInterpolator</td>
<td>An interpolator whose change flings forward and overshoots the last value then comes back.</td>
</tr>
<tr>
<td>TimeInterpolator</td>
<td>An interface that allows you to implement your own interpolator.</td>
</tr>
</tbody></table>
<h2 id="Animating-with-ValueAnimator"><a href="#Animating-with-ValueAnimator" class="headerlink" title="Animating with ValueAnimator"></a>Animating with ValueAnimator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ValueAnimator animation = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">100f</span>);</span><br><span class="line">animation.setDuration(<span class="number">1000</span>);</span><br><span class="line">animation.start();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ValueAnimator animation = ValueAnimator.ofObject(<span class="keyword">new</span> MyTypeEvaluator(), startPropertyValue, endPropertyValue);</span><br><span class="line">animation.setDuration(<span class="number">1000</span>);</span><br><span class="line">animation.start();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">animation.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator updatedAnimation)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// You can use the animated value in a property that uses the</span></span><br><span class="line">        <span class="comment">// same type as the animation. In this case, you can use the</span></span><br><span class="line">        <span class="comment">// float value in the translationX property.</span></span><br><span class="line">        <span class="keyword">float</span> animatedValue = (<span class="keyword">float</span>)updatedAnimation.getAnimatedValue();</span><br><span class="line">        textView.setTranslationX(animatedValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Animating-with-ObjectAnimator"><a href="#Animating-with-ObjectAnimator" class="headerlink" title="Animating with ObjectAnimator"></a>Animating with ObjectAnimator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectAnimator animation = ObjectAnimator.ofFloat(textView, <span class="string">&quot;translationX&quot;</span>, <span class="number">100f</span>);</span><br><span class="line">animation.setDuration(<span class="number">1000</span>);</span><br><span class="line">animation.start();</span><br></pre></td></tr></table></figure>

<h2 id="Choreographing-Multiple-Animations-with-AnimatorSet"><a href="#Choreographing-Multiple-Animations-with-AnimatorSet" class="headerlink" title="Choreographing Multiple Animations with AnimatorSet"></a>Choreographing Multiple Animations with AnimatorSet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnimatorSet bouncer = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">bouncer.play(bounceAnim).before(squashAnim1);</span><br><span class="line">bouncer.play(squashAnim1).with(squashAnim2);</span><br><span class="line">bouncer.play(squashAnim1).with(stretchAnim1);</span><br><span class="line">bouncer.play(squashAnim1).with(stretchAnim2);</span><br><span class="line">bouncer.play(bounceBackAnim).after(stretchAnim2);</span><br><span class="line">ValueAnimator fadeAnim = ObjectAnimator.ofFloat(newBall, <span class="string">&quot;alpha&quot;</span>, <span class="number">1f</span>, <span class="number">0f</span>);</span><br><span class="line">fadeAnim.setDuration(<span class="number">250</span>);</span><br><span class="line">AnimatorSet animatorSet = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">animatorSet.play(bouncer).before(fadeAnim);</span><br><span class="line">animatorSet.start();</span><br></pre></td></tr></table></figure>

<h2 id="Animating-Layout-Changes-to-ViewGroups"><a href="#Animating-Layout-Changes-to-ViewGroups" class="headerlink" title="Animating Layout Changes to ViewGroups"></a>Animating Layout Changes to ViewGroups</h2><p>You can animate layout changes within a ViewGroup with the <code>LayoutTransition</code> class. Views inside a ViewGroup can go through an appearing and disappearing animation when you add them to or remove them from a ViewGroup or when you call a View’s <code>setVisibility()</code> method with <code>VISIBLE</code>, <code>INVISIBLE</code>, or <code>GONE</code>. The remaining Views in the ViewGroup can also animate into their new positions when you add or remove Views. You can define the following animations in a LayoutTransition object by calling <code>setAnimator()</code> and passing in an <code>Animator</code> object with one of the following LayoutTransition constants:</p>
<ul>
<li>APPEARING - A flag indicating the animation that runs on items that are appearing in the container.</li>
<li>CHANGE_APPEARING - A flag indicating the animation that runs on items that are changing due to a new item appearing in the container.</li>
<li>DISAPPEARING - A flag indicating the animation that runs on items that are disappearing from the container.</li>
<li>CHANGE_DISAPPEARING - A flag indicating the animation that runs on items that are changing due to an item disappearing from the container.</li>
</ul>
<h2 id="Using-StateListAnimator-to-animate-view-state-changes"><a href="#Using-StateListAnimator-to-animate-view-state-changes" class="headerlink" title="Using StateListAnimator to animate view state changes"></a>Using StateListAnimator to animate view state changes</h2><p>res/xml/animate_scale.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- the pressed state; increase x and y size to 150% --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">&quot;scaleX&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">&quot;@android:integer/config_shortAnimTime&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">&quot;1.5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">&quot;floatType&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">&quot;scaleY&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">&quot;@android:integer/config_shortAnimTime&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">&quot;1.5&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">&quot;floatType&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- the default, non-pressed state; set x and y size to 100% --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">&quot;scaleX&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">&quot;@android:integer/config_shortAnimTime&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">&quot;floatType&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">&quot;scaleY&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">&quot;@android:integer/config_shortAnimTime&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">&quot;floatType&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:stateListAnimator</span>=<span class="string">&quot;@xml/animate_scale&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Specifying-Keyframes"><a href="#Specifying-Keyframes" class="headerlink" title="Specifying Keyframes"></a>Specifying Keyframes</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Keyframe kf0 = Keyframe.ofFloat(<span class="number">0f</span>, <span class="number">0f</span>);</span><br><span class="line">Keyframe kf1 = Keyframe.ofFloat(<span class="number">.5f</span>, <span class="number">360f</span>);</span><br><span class="line">Keyframe kf2 = Keyframe.ofFloat(<span class="number">1f</span>, <span class="number">0f</span>);</span><br><span class="line">PropertyValuesHolder pvhRotation = PropertyValuesHolder.ofKeyframe(<span class="string">&quot;rotation&quot;</span>, kf0, kf1, kf2);</span><br><span class="line">ObjectAnimator rotationAnim = ObjectAnimator.ofPropertyValuesHolder(target, pvhRotation)</span><br><span class="line">rotationAnim.setDuration(5000ms);</span><br></pre></td></tr></table></figure>

<h2 id="Animating-with-ViewPropertyAnimator"><a href="#Animating-with-ViewPropertyAnimator" class="headerlink" title="Animating with ViewPropertyAnimator"></a>Animating with ViewPropertyAnimator</h2><h3 id="Multiple-ObjectAnimator-objects"><a href="#Multiple-ObjectAnimator-objects" class="headerlink" title="Multiple ObjectAnimator objects"></a>Multiple ObjectAnimator objects</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectAnimator animX = ObjectAnimator.ofFloat(myView, <span class="string">&quot;x&quot;</span>, <span class="number">50f</span>);</span><br><span class="line">ObjectAnimator animY = ObjectAnimator.ofFloat(myView, <span class="string">&quot;y&quot;</span>, <span class="number">100f</span>);</span><br><span class="line">AnimatorSet animSetXY = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">animSetXY.playTogether(animX, animY);</span><br><span class="line">animSetXY.start();</span><br></pre></td></tr></table></figure>

<h3 id="One-ObjectAnimator"><a href="#One-ObjectAnimator" class="headerlink" title="One ObjectAnimator"></a>One ObjectAnimator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PropertyValuesHolder pvhX = PropertyValuesHolder.ofFloat(<span class="string">&quot;x&quot;</span>, <span class="number">50f</span>);</span><br><span class="line">PropertyValuesHolder pvhY = PropertyValuesHolder.ofFloat(<span class="string">&quot;y&quot;</span>, <span class="number">100f</span>);</span><br><span class="line">ObjectAnimator.ofPropertyValuesHolder(myView, pvhX, pvyY).start();</span><br></pre></td></tr></table></figure>

<h3 id="ViewPropertyAnimator"><a href="#ViewPropertyAnimator" class="headerlink" title="ViewPropertyAnimator"></a>ViewPropertyAnimator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">myView.animate().x(<span class="number">50f</span>).y(<span class="number">100f</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Declaring-Animations-in-XML"><a href="#Declaring-Animations-in-XML" class="headerlink" title="Declaring Animations in XML"></a>Declaring Animations in XML</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">android:ordering</span>=<span class="string">&quot;sequentially&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:propertyName</span>=<span class="string">&quot;x&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:duration</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueTo</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueType</span>=<span class="string">&quot;intType&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:propertyName</span>=<span class="string">&quot;y&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:duration</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueTo</span>=<span class="string">&quot;300&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueType</span>=<span class="string">&quot;intType&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">&quot;alpha&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">&quot;1f&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,</span><br><span class="line">    R.anim.property_animator);</span><br><span class="line">set.setTarget(myObject);</span><br><span class="line">set.start();</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animator</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueType</span>=<span class="string">&quot;floatType&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueFrom</span>=<span class="string">&quot;0f&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueTo</span>=<span class="string">&quot;-100f&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ValueAnimator xmlAnimator = (ValueAnimator) AnimatorInflater.loadAnimator(<span class="keyword">this</span>,</span><br><span class="line">        R.animator.animator);</span><br><span class="line">xmlAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator updatedAnimation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> animatedValue = (<span class="keyword">float</span>)updatedAnimation.getAnimatedValue();</span><br><span class="line">        textView.setTranslationX(animatedValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">xmlAnimator.start();</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://developer.android.google.cn/guide/topics/graphics/prop-animation.html">Property Animation Overview | Android Developers</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>属性动画</tag>
        <tag>ObjectAnimator</tag>
      </tags>
  </entry>
</search>
